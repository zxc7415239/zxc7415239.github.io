{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/back_to_top.png","path":"css/images/back_to_top.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/back_to_topb.png","path":"css/images/back_to_topb.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner1.jpg","path":"css/images/banner1.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1492778695530},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1492778695530},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1492778695530},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1492778695530},{"_id":"themes/landscape/_config.yml","hash":"477dfb183b9094a5f48dc8b97eef9a4ca6eaa376","modified":1492966351149},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1492778695530},{"_id":"source/_posts/Blog-管理.md","hash":"eccc4d4bb99a300b37d86de0e0f9158ade03f6ad","modified":1492966615245},{"_id":"source/_posts/Django-Celery-in-windows.md","hash":"b733ebdbac1e5703d320803a9ed38c6b6891ef55","modified":1492966605965},{"_id":"source/_posts/Flush-output-of-Python-print.md","hash":"937e753bf20eb816a115bc16eb09bf7845d5738d","modified":1492966572965},{"_id":"source/_posts/Hexo-Github-簡單使用教學.md","hash":"63971e58c954915be375070393d8590065b43bfe","modified":1492969701177},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1492778695550},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1492960127902},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1492778695550},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1492778695550},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1492778695550},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492778695551},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1492778695550},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492778695551},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1492778695551},{"_id":"themes/landscape/layout/totop.ejs","hash":"9abc5d76c2a0f11af69dbd1be98953ef7d9e765d","modified":1492968335854},{"_id":"themes/landscape/source/favicon.ico","hash":"249c3c3c0d019c1e66f7e3cbb374f8a17bc5e797","modified":1492998556349},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1492778695550},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"e95148cd86370f44210be87470ddb9fb5475a0df","modified":1492968178383},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"2862be5fe4e77af2ba4e46b5dfc9efdeaeabc332","modified":1492968166054},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"0948bf9216027d06df0c7446f006c055b38b2136","modified":1492963243953},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1492778695566},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1492778695566},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1492965608643},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1492778695566},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1492778695567},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1492778695567},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1492778695567},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1492778695569},{"_id":"themes/landscape/source/css/_variables.styl","hash":"6b5ad16adf9b0c482724501ecfda4cf52acbff3c","modified":1492785114115},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1492778695571},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492778695572},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1492778695573},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1492778695590},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1492778695591},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1492778695572},{"_id":"themes/landscape/source/js/totop.js","hash":"200c95f387ed94cdfb405df5c7955e2771c169bd","modified":1492968410310},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1492778695584},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1492778695584},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"809dbbdfade83d03786a2cdc0136b049691838ff","modified":1492959283453},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1492778695584},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1492778695585},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1492778695585},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1492778695586},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1492778695591},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1492778695591},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1492778695591},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"c16ee1f1e77e54ac8cb4908efe72d0e1ffc21d80","modified":1492784726091},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"a02942c63a377edd03cb40096364b17ca2a93613","modified":1492781140662},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1492778695592},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1492778695592},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1492966336204},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1492778695592},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1492778695593},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1492778695592},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1492778695592},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1492778695604},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1492778695596},{"_id":"themes/landscape/source/css/images/back_to_top.png","hash":"531e61b84705ace0e5a31ffa9b58ed3b4c8d7d53","modified":1492969579318},{"_id":"themes/landscape/source/css/images/back_to_topb.png","hash":"e082c474e816901ab573eca3995f28963a39265b","modified":1492969229652},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492778695593},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492778695593},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1492778695594},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1492778695594},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492778695594},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1492778695606},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1492778695597},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1492778695605},{"_id":"themes/landscape/source/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1492778695599},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"4888df73b18e1d62781f72c7c2ae41d47edb8534","modified":1441084408000},{"_id":"public/atom.xml","hash":"d147daee6c113190935a3b78c7f88241c3c53c9d","modified":1493023002273},{"_id":"public/sitemap.xml","hash":"9952b63e06d781e04abfb24de08a985d12925d06","modified":1493023002353},{"_id":"public/2017/04/23/Flush-output-of-Python-print/index.html","hash":"486776c45f09766d5e0e650ab8d8c415add47e34","modified":1493023002363},{"_id":"public/archives/index.html","hash":"2e4aa9c022508602ba81626cfc39001e28bc8e7c","modified":1493023002363},{"_id":"public/archives/2017/index.html","hash":"08bb5a49c123cca22909e922e8e08a154c9d0058","modified":1493023002363},{"_id":"public/archives/2017/04/index.html","hash":"edb550a25ae61b6bcff9c92b41e105e8b8a2402f","modified":1493023002363},{"_id":"public/categories/Hexo/index.html","hash":"d37175995031c1c2636d43d6dc1bf39a479d0ccc","modified":1493023002363},{"_id":"public/categories/Python/index.html","hash":"0d6c78fbd6f497cf487f30abb95a9e20ff5fc8a2","modified":1493023002363},{"_id":"public/categories/Python/Django/index.html","hash":"de2fc6444706e76dc7637f7a7ad1b026fe72fd39","modified":1493023002363},{"_id":"public/index.html","hash":"c25d29b15f6f80b7b75fc355c22cb10415e386fd","modified":1493023002363},{"_id":"public/tags/Hexo/index.html","hash":"635468ce57bc3b674b47975ea7021116284b4153","modified":1493023002363},{"_id":"public/tags/Python/index.html","hash":"0eeafbe422c505592b12b8d5c240f9c09d82f5e7","modified":1493023002363},{"_id":"public/tags/Django/index.html","hash":"ca58e70509e7efc9c800ab1cf2c12105b292fb78","modified":1493023002363},{"_id":"public/tags/Celery/index.html","hash":"edcd7f3e6ca2e707526a235656be1849023664a5","modified":1493023002363},{"_id":"public/2017/04/21/Hexo-Github-簡單使用教學/index.html","hash":"03b84f3ac8b557b27d8cf12bb9f8c9a27a183eec","modified":1493023002363},{"_id":"public/2017/04/22/Blog-管理/index.html","hash":"9317f810b5dfe8a7fcfdc747e1b9c7981e41c0c9","modified":1493023002363},{"_id":"public/2017/04/22/Django-Celery-in-windows/index.html","hash":"861b0ce061d1f30c7bafceee330eeccac50944e7","modified":1493023002363},{"_id":"public/favicon.ico","hash":"249c3c3c0d019c1e66f7e3cbb374f8a17bc5e797","modified":1493023002373},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493023002373},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493023002373},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493023002373},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493023002373},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493023002373},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493023002373},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1493023002373},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1493023002373},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1493023002373},{"_id":"public/css/images/back_to_top.png","hash":"531e61b84705ace0e5a31ffa9b58ed3b4c8d7d53","modified":1493023002373},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493023002373},{"_id":"public/css/images/back_to_topb.png","hash":"e082c474e816901ab573eca3995f28963a39265b","modified":1493023002373},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1493023003113},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1493023003123},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1493023003123},{"_id":"public/js/totop.js","hash":"54a3f6efcc046d5eb7236bbd036a6c6f6e350d62","modified":1493023003123},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493023003123},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1493023003123},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493023003123},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1493023003123},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1493023003123},{"_id":"public/css/style.css","hash":"26e7f41290f846148708127304cd0252b7160acc","modified":1493023003123},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1493023003123},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1493023003123},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1493023003143},{"_id":"public/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1493023003143},{"_id":"public/css/images/banner.jpg","hash":"4888df73b18e1d62781f72c7c2ae41d47edb8534","modified":1493023003173}],"Category":[{"name":"Hexo","_id":"cj1vvcgvr000230rq3rnx23xl"},{"name":"Python","_id":"cj1vvcgw1000530rqjsm1fkeq"},{"name":"Django","parent":"cj1vvcgw1000530rqjsm1fkeq","_id":"cj1vvcgw1000b30rqniw2lh4n"}],"Data":[],"Page":[],"Post":[{"title":"Blog 管理","date":"2017-04-21T17:10:48.000Z","_content":"\n這邊是介紹如何管理BLOG，並能在不同電腦上寫 Blog。\n<!--more-->\n* [新建分支，推送源碼](#新建)\n* [日常 Blog 管理](#管理)\n  * [發新文章](#發新文章)\n  * [Blog 維護](#維護)\n* [Reference](#Reference)\n\n## 新建分支，推送源碼 <a href=\"#新建\" id=\"新建\">#</a>\n為了便於在不同的電腦上寫 Blog，需要對 Blog 內容進行同步，我們使用 Github 分支(branch)來解決這個問題。\n首先到 [Github](https://github.com/) 為倉庫新增分支，分支名稱為 hexo。\n並到右上方 Settings 中，將 branches 選項中的 default 改成 hexo。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E5%89%B5%E5%BB%BA%E5%88%86%E6%94%AF.png\" alt=\"創建分支\" width=\"50%\" height=\"50%\" />\n並到本地端放置專案的資料夾中。\n```\nGithub                     # 放置專案的資料夾\n├── yourname.github.io     # 之前生成 包含 hexo 套件的倉庫\n└── MarkdownPhotos         # 放置 blog 使用圖片的倉庫\n```\n新增一個資料夾，名稱任意，之後要放 blog 資料夾用的。\n```\nGithub\n├── yourname.github.io\n├── MarkdownPhotos\n└── Blog                   # 新增\n```\n將 Git Bash 中的路徑定位到 ``GitHub/blog`` 中。將 Github 上的倉庫拉到本地端。\n```\n# git bash 上面的路徑大概長這樣\nYou-PC@You  /e/Documents/GitHub/blog\n$ git clone git@github.com:yourname/yourname.github.io.git\n```\n現在 blog 中多一個 yourname.github.io 資料夾。\n```\nGithub\n├── yourname.github.io\n├── MarkdownPhotos\n└── Blog\n    └── yourname.github.io   # 新增\n```\n將 Git Bash 中的路徑定位到 ``Github/Blog/yourname.github.io`` 中。\n此時 Git Bash 顯示當前分支為 hexo，即 default 分支。\n接下來輸入指令清空 hexo 目錄。\n```\n# git bash 上面的路徑大概長這樣，後面 branch 變成 hexo。\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo)\n$ rm -rf *\n$ git add .\n$ git commit -m 'init'\n$ git push origin hexo\n```\n此動作會清空hexo分支下原有透過 ``hexo d`` 部署的 html 靜態檔案。\n然後在手動將 ``Github/yourname.github.io`` 的檔案複製到 ``Github/Blog/yourname.github.io`` 中。\n記得不要複製到 .git 資料夾(預設是隱藏狀態)。\n```\nGithub\n├── yourname.github.io\n|   ├── .git                     # .git 不要複製到\n|   └── other files/floders      # 複製這些檔案\n├── MarkdownPhotos\n└── Blog\n    └── yourname.github.io       # 丟到這個只剩下 .git 的資料夾中\n        └── .git\n```\n複製完後 ``Github/yourname.github.io`` 這個資料夾就能刪除了。\n接下來透過指令將本地端的 Blog 源碼推送到 Github 的 hexo 目錄下。\n```\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 目前路徑\n$ git add .\n$ git commit -m 'init'\n$ git push origin hexo\n```\n注意：Blog 主配置文件 _config.yml 中的 deploy 參數，部署的分支應為 master。\n以後在 hexo 分支下寫 Blog，然後 ``hexo d`` 部署到 master 分支下。\n\n## 日常 Blog 管理 <a href=\"#管理\" id=\"管理\">#</a>\n#### 發新文章  <a href=\"#發新文章\" id=\"發新文章\">#</a>\n執行 ``hexo new`` 命令會在 ``/source/_posts`` 下生成 post_name.md。\n編輯語法為 [Markdown](http://markdown.tw/)。\n```\nhexo new [layout] 'post_name'   # 發表文章\nhexo new 'post_name'            # 不選layout時，預設是 post\nhexo n 'post_name'              # 簡寫\n```\nlayout 模板文件在目錄scaffolds下。\npost.md 預設內容如下。\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n```\n如果想在每篇文章中添加 categories 分類信息，只需要修改 post.md 文件即可。\n```\n---\ntitle: {{ title }}  #文章名稱\ndate: {{ date }}    #文章發布日期\ncategories:         #文章分類（可以為空）\ntags:               #文章標籤（可以為空），多標籤格式[tag1,tag2,tag3]\n---\n```\n不想在首頁顯示全文可使用摘要，在 post_name.md 中使用。\n```\n以上是摘要\n<!--more-->\n以下是剩下文章\n```\nmore 以上內容即是摘要信息，顯示在首頁中，點擊 Read More 按鈕打開全文。\n\n#### Blog 維護 <a href=\"#維護\" id=\"維護\">#</a>\n日常發文，修改文章都在 hexo 分支下進行，平時先透過本地伺服器編輯和觀看內容。\n```\nhexo s\n```\n編輯完成後，執行命令將修改過的源碼推送至 hexo 分支。\n```\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 當前路徑\ngit add .\ngit commit -m 'XXX'\ngit push origin hexo\n```\n然後執行命令產生靜態頁面並部署到 master 分支。\n```\nhexo g\nhexo d\n```\n最後通過 ``https://yourname.github.io/`` 查看。\n\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[Hexo搭建个人博客](http://yurixu.com/categories/Hexo/)","source":"_posts/Blog-管理.md","raw":"---\ntitle: Blog 管理\ndate: 2017-04-22 01:10:48\ncategories: Hexo\ntags: Hexo\n---\n\n這邊是介紹如何管理BLOG，並能在不同電腦上寫 Blog。\n<!--more-->\n* [新建分支，推送源碼](#新建)\n* [日常 Blog 管理](#管理)\n  * [發新文章](#發新文章)\n  * [Blog 維護](#維護)\n* [Reference](#Reference)\n\n## 新建分支，推送源碼 <a href=\"#新建\" id=\"新建\">#</a>\n為了便於在不同的電腦上寫 Blog，需要對 Blog 內容進行同步，我們使用 Github 分支(branch)來解決這個問題。\n首先到 [Github](https://github.com/) 為倉庫新增分支，分支名稱為 hexo。\n並到右上方 Settings 中，將 branches 選項中的 default 改成 hexo。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E5%89%B5%E5%BB%BA%E5%88%86%E6%94%AF.png\" alt=\"創建分支\" width=\"50%\" height=\"50%\" />\n並到本地端放置專案的資料夾中。\n```\nGithub                     # 放置專案的資料夾\n├── yourname.github.io     # 之前生成 包含 hexo 套件的倉庫\n└── MarkdownPhotos         # 放置 blog 使用圖片的倉庫\n```\n新增一個資料夾，名稱任意，之後要放 blog 資料夾用的。\n```\nGithub\n├── yourname.github.io\n├── MarkdownPhotos\n└── Blog                   # 新增\n```\n將 Git Bash 中的路徑定位到 ``GitHub/blog`` 中。將 Github 上的倉庫拉到本地端。\n```\n# git bash 上面的路徑大概長這樣\nYou-PC@You  /e/Documents/GitHub/blog\n$ git clone git@github.com:yourname/yourname.github.io.git\n```\n現在 blog 中多一個 yourname.github.io 資料夾。\n```\nGithub\n├── yourname.github.io\n├── MarkdownPhotos\n└── Blog\n    └── yourname.github.io   # 新增\n```\n將 Git Bash 中的路徑定位到 ``Github/Blog/yourname.github.io`` 中。\n此時 Git Bash 顯示當前分支為 hexo，即 default 分支。\n接下來輸入指令清空 hexo 目錄。\n```\n# git bash 上面的路徑大概長這樣，後面 branch 變成 hexo。\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo)\n$ rm -rf *\n$ git add .\n$ git commit -m 'init'\n$ git push origin hexo\n```\n此動作會清空hexo分支下原有透過 ``hexo d`` 部署的 html 靜態檔案。\n然後在手動將 ``Github/yourname.github.io`` 的檔案複製到 ``Github/Blog/yourname.github.io`` 中。\n記得不要複製到 .git 資料夾(預設是隱藏狀態)。\n```\nGithub\n├── yourname.github.io\n|   ├── .git                     # .git 不要複製到\n|   └── other files/floders      # 複製這些檔案\n├── MarkdownPhotos\n└── Blog\n    └── yourname.github.io       # 丟到這個只剩下 .git 的資料夾中\n        └── .git\n```\n複製完後 ``Github/yourname.github.io`` 這個資料夾就能刪除了。\n接下來透過指令將本地端的 Blog 源碼推送到 Github 的 hexo 目錄下。\n```\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 目前路徑\n$ git add .\n$ git commit -m 'init'\n$ git push origin hexo\n```\n注意：Blog 主配置文件 _config.yml 中的 deploy 參數，部署的分支應為 master。\n以後在 hexo 分支下寫 Blog，然後 ``hexo d`` 部署到 master 分支下。\n\n## 日常 Blog 管理 <a href=\"#管理\" id=\"管理\">#</a>\n#### 發新文章  <a href=\"#發新文章\" id=\"發新文章\">#</a>\n執行 ``hexo new`` 命令會在 ``/source/_posts`` 下生成 post_name.md。\n編輯語法為 [Markdown](http://markdown.tw/)。\n```\nhexo new [layout] 'post_name'   # 發表文章\nhexo new 'post_name'            # 不選layout時，預設是 post\nhexo n 'post_name'              # 簡寫\n```\nlayout 模板文件在目錄scaffolds下。\npost.md 預設內容如下。\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n```\n如果想在每篇文章中添加 categories 分類信息，只需要修改 post.md 文件即可。\n```\n---\ntitle: {{ title }}  #文章名稱\ndate: {{ date }}    #文章發布日期\ncategories:         #文章分類（可以為空）\ntags:               #文章標籤（可以為空），多標籤格式[tag1,tag2,tag3]\n---\n```\n不想在首頁顯示全文可使用摘要，在 post_name.md 中使用。\n```\n以上是摘要\n<!--more-->\n以下是剩下文章\n```\nmore 以上內容即是摘要信息，顯示在首頁中，點擊 Read More 按鈕打開全文。\n\n#### Blog 維護 <a href=\"#維護\" id=\"維護\">#</a>\n日常發文，修改文章都在 hexo 分支下進行，平時先透過本地伺服器編輯和觀看內容。\n```\nhexo s\n```\n編輯完成後，執行命令將修改過的源碼推送至 hexo 分支。\n```\nYou-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 當前路徑\ngit add .\ngit commit -m 'XXX'\ngit push origin hexo\n```\n然後執行命令產生靜態頁面並部署到 master 分支。\n```\nhexo g\nhexo d\n```\n最後通過 ``https://yourname.github.io/`` 查看。\n\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[Hexo搭建个人博客](http://yurixu.com/categories/Hexo/)","slug":"Blog-管理","published":1,"updated":"2017-04-23T16:56:55.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1vvcgvr000030rqe7a2dypg","content":"<p>這邊是介紹如何管理BLOG，並能在不同電腦上寫 Blog。<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"#新建\">新建分支，推送源碼</a></li>\n<li><a href=\"#管理\">日常 Blog 管理</a><ul>\n<li><a href=\"#發新文章\">發新文章</a></li>\n<li><a href=\"#維護\">Blog 維護</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"新建分支，推送源碼\"><a href=\"#新建分支，推送源碼\" class=\"headerlink\" title=\"新建分支，推送源碼 #\"></a>新建分支，推送源碼 <a href=\"#新建\" id=\"新建\">#</a></h2><p>為了便於在不同的電腦上寫 Blog，需要對 Blog 內容進行同步，我們使用 Github 分支(branch)來解決這個問題。<br>首先到 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a> 為倉庫新增分支，分支名稱為 hexo。<br>並到右上方 Settings 中，將 branches 選項中的 default 改成 hexo。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E5%89%B5%E5%BB%BA%E5%88%86%E6%94%AF.png\" alt=\"創建分支\" width=\"50%\" height=\"50%\"><br>並到本地端放置專案的資料夾中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github                     # 放置專案的資料夾</div><div class=\"line\">├── yourname.github.io     # 之前生成 包含 hexo 套件的倉庫</div><div class=\"line\">└── MarkdownPhotos         # 放置 blog 使用圖片的倉庫</div></pre></td></tr></table></figure></p>\n<p>新增一個資料夾，名稱任意，之後要放 blog 資料夾用的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog                   # 新增</div></pre></td></tr></table></figure></p>\n<p>將 Git Bash 中的路徑定位到 <code>GitHub/blog</code> 中。將 Github 上的倉庫拉到本地端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog</div><div class=\"line\">$ git clone git@github.com:yourname/yourname.github.io.git</div></pre></td></tr></table></figure></p>\n<p>現在 blog 中多一個 yourname.github.io 資料夾。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog</div><div class=\"line\">    └── yourname.github.io   # 新增</div></pre></td></tr></table></figure></p>\n<p>將 Git Bash 中的路徑定位到 <code>Github/Blog/yourname.github.io</code> 中。<br>此時 Git Bash 顯示當前分支為 hexo，即 default 分支。<br>接下來輸入指令清空 hexo 目錄。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣，後面 branch 變成 hexo。</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo)</div><div class=\"line\">$ rm -rf *</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &apos;init&apos;</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>此動作會清空hexo分支下原有透過 <code>hexo d</code> 部署的 html 靜態檔案。<br>然後在手動將 <code>Github/yourname.github.io</code> 的檔案複製到 <code>Github/Blog/yourname.github.io</code> 中。<br>記得不要複製到 .git 資料夾(預設是隱藏狀態)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">|   ├── .git                     # .git 不要複製到</div><div class=\"line\">|   └── other files/floders      # 複製這些檔案</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog</div><div class=\"line\">    └── yourname.github.io       # 丟到這個只剩下 .git 的資料夾中</div><div class=\"line\">        └── .git</div></pre></td></tr></table></figure></p>\n<p>複製完後 <code>Github/yourname.github.io</code> 這個資料夾就能刪除了。<br>接下來透過指令將本地端的 Blog 源碼推送到 Github 的 hexo 目錄下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 目前路徑</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &apos;init&apos;</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>注意：Blog 主配置文件 _config.yml 中的 deploy 參數，部署的分支應為 master。<br>以後在 hexo 分支下寫 Blog，然後 <code>hexo d</code> 部署到 master 分支下。</p>\n<h2 id=\"日常-Blog-管理\"><a href=\"#日常-Blog-管理\" class=\"headerlink\" title=\"日常 Blog 管理 #\"></a>日常 Blog 管理 <a href=\"#管理\" id=\"管理\">#</a></h2><h4 id=\"發新文章\"><a href=\"#發新文章\" class=\"headerlink\" title=\"發新文章  #\"></a>發新文章  <a href=\"#發新文章\" id=\"發新文章\">#</a></h4><p>執行 <code>hexo new</code> 命令會在 <code>/source/_posts</code> 下生成 post_name.md。<br>編輯語法為 <a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">Markdown</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &apos;post_name&apos;   # 發表文章</div><div class=\"line\">hexo new &apos;post_name&apos;            # 不選layout時，預設是 post</div><div class=\"line\">hexo n &apos;post_name&apos;              # 簡寫</div></pre></td></tr></table></figure></p>\n<p>layout 模板文件在目錄scaffolds下。<br>post.md 預設內容如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>如果想在每篇文章中添加 categories 分類信息，只需要修改 post.md 文件即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;  #文章名稱</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;    #文章發布日期</div><div class=\"line\">categories:         #文章分類（可以為空）</div><div class=\"line\">tags:               #文章標籤（可以為空），多標籤格式[tag1,tag2,tag3]</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>不想在首頁顯示全文可使用摘要，在 post_name.md 中使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是剩下文章</div></pre></td></tr></table></figure></p>\n<p>more 以上內容即是摘要信息，顯示在首頁中，點擊 Read More 按鈕打開全文。</p>\n<h4 id=\"Blog-維護\"><a href=\"#Blog-維護\" class=\"headerlink\" title=\"Blog 維護 #\"></a>Blog 維護 <a href=\"#維護\" id=\"維護\">#</a></h4><p>日常發文，修改文章都在 hexo 分支下進行，平時先透過本地伺服器編輯和觀看內容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>編輯完成後，執行命令將修改過的源碼推送至 hexo 分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 當前路徑</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;XXX&apos;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>然後執行命令產生靜態頁面並部署到 master 分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>最後通過 <code>https://yourname.github.io/</code> 查看。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://yurixu.com/categories/Hexo/\" target=\"_blank\" rel=\"external\">Hexo搭建个人博客</a></p>\n","site":{"data":{}},"excerpt":"<p>這邊是介紹如何管理BLOG，並能在不同電腦上寫 Blog。<br>","more":"</p>\n<ul>\n<li><a href=\"#新建\">新建分支，推送源碼</a></li>\n<li><a href=\"#管理\">日常 Blog 管理</a><ul>\n<li><a href=\"#發新文章\">發新文章</a></li>\n<li><a href=\"#維護\">Blog 維護</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"新建分支，推送源碼\"><a href=\"#新建分支，推送源碼\" class=\"headerlink\" title=\"新建分支，推送源碼 #\"></a>新建分支，推送源碼 <a href=\"#新建\" id=\"新建\">#</a></h2><p>為了便於在不同的電腦上寫 Blog，需要對 Blog 內容進行同步，我們使用 Github 分支(branch)來解決這個問題。<br>首先到 <a href=\"https://github.com/\">Github</a> 為倉庫新增分支，分支名稱為 hexo。<br>並到右上方 Settings 中，將 branches 選項中的 default 改成 hexo。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E5%89%B5%E5%BB%BA%E5%88%86%E6%94%AF.png\" alt=\"創建分支\" width=\"50%\" height=\"50%\" /><br>並到本地端放置專案的資料夾中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github                     # 放置專案的資料夾</div><div class=\"line\">├── yourname.github.io     # 之前生成 包含 hexo 套件的倉庫</div><div class=\"line\">└── MarkdownPhotos         # 放置 blog 使用圖片的倉庫</div></pre></td></tr></table></figure></p>\n<p>新增一個資料夾，名稱任意，之後要放 blog 資料夾用的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog                   # 新增</div></pre></td></tr></table></figure></p>\n<p>將 Git Bash 中的路徑定位到 <code>GitHub/blog</code> 中。將 Github 上的倉庫拉到本地端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog</div><div class=\"line\">$ git clone git@github.com:yourname/yourname.github.io.git</div></pre></td></tr></table></figure></p>\n<p>現在 blog 中多一個 yourname.github.io 資料夾。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog</div><div class=\"line\">    └── yourname.github.io   # 新增</div></pre></td></tr></table></figure></p>\n<p>將 Git Bash 中的路徑定位到 <code>Github/Blog/yourname.github.io</code> 中。<br>此時 Git Bash 顯示當前分支為 hexo，即 default 分支。<br>接下來輸入指令清空 hexo 目錄。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣，後面 branch 變成 hexo。</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo)</div><div class=\"line\">$ rm -rf *</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &apos;init&apos;</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>此動作會清空hexo分支下原有透過 <code>hexo d</code> 部署的 html 靜態檔案。<br>然後在手動將 <code>Github/yourname.github.io</code> 的檔案複製到 <code>Github/Blog/yourname.github.io</code> 中。<br>記得不要複製到 .git 資料夾(預設是隱藏狀態)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github</div><div class=\"line\">├── yourname.github.io</div><div class=\"line\">|   ├── .git                     # .git 不要複製到</div><div class=\"line\">|   └── other files/floders      # 複製這些檔案</div><div class=\"line\">├── MarkdownPhotos</div><div class=\"line\">└── Blog</div><div class=\"line\">    └── yourname.github.io       # 丟到這個只剩下 .git 的資料夾中</div><div class=\"line\">        └── .git</div></pre></td></tr></table></figure></p>\n<p>複製完後 <code>Github/yourname.github.io</code> 這個資料夾就能刪除了。<br>接下來透過指令將本地端的 Blog 源碼推送到 Github 的 hexo 目錄下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 目前路徑</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &apos;init&apos;</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>注意：Blog 主配置文件 _config.yml 中的 deploy 參數，部署的分支應為 master。<br>以後在 hexo 分支下寫 Blog，然後 <code>hexo d</code> 部署到 master 分支下。</p>\n<h2 id=\"日常-Blog-管理\"><a href=\"#日常-Blog-管理\" class=\"headerlink\" title=\"日常 Blog 管理 #\"></a>日常 Blog 管理 <a href=\"#管理\" id=\"管理\">#</a></h2><h4 id=\"發新文章\"><a href=\"#發新文章\" class=\"headerlink\" title=\"發新文章  #\"></a>發新文章  <a href=\"#發新文章\" id=\"發新文章\">#</a></h4><p>執行 <code>hexo new</code> 命令會在 <code>/source/_posts</code> 下生成 post_name.md。<br>編輯語法為 <a href=\"http://markdown.tw/\">Markdown</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &apos;post_name&apos;   # 發表文章</div><div class=\"line\">hexo new &apos;post_name&apos;            # 不選layout時，預設是 post</div><div class=\"line\">hexo n &apos;post_name&apos;              # 簡寫</div></pre></td></tr></table></figure></p>\n<p>layout 模板文件在目錄scaffolds下。<br>post.md 預設內容如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>如果想在每篇文章中添加 categories 分類信息，只需要修改 post.md 文件即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;  #文章名稱</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;    #文章發布日期</div><div class=\"line\">categories:         #文章分類（可以為空）</div><div class=\"line\">tags:               #文章標籤（可以為空），多標籤格式[tag1,tag2,tag3]</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>不想在首頁顯示全文可使用摘要，在 post_name.md 中使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是剩下文章</div></pre></td></tr></table></figure></p>\n<p>more 以上內容即是摘要信息，顯示在首頁中，點擊 Read More 按鈕打開全文。</p>\n<h4 id=\"Blog-維護\"><a href=\"#Blog-維護\" class=\"headerlink\" title=\"Blog 維護 #\"></a>Blog 維護 <a href=\"#維護\" id=\"維護\">#</a></h4><p>日常發文，修改文章都在 hexo 分支下進行，平時先透過本地伺服器編輯和觀看內容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>編輯完成後，執行命令將修改過的源碼推送至 hexo 分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">You-PC@You  /e/Documents/GitHub/blog/yourname.github.io (hexo) # 當前路徑</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;XXX&apos;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>然後執行命令產生靜態頁面並部署到 master 分支。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>最後通過 <code>https://yourname.github.io/</code> 查看。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://yurixu.com/categories/Hexo/\">Hexo搭建个人博客</a></p>"},{"title":"Django + Celery in windows","date":"2017-04-22T11:05:26.000Z","_content":"\n最新版的 Celery 不支援 Windows，網路上教學大部分都是Linux系統，想讓它動起來花了點心力，這邊紀錄一下過程。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [建立流程](#建立流程)\n  * [安裝 Celery](#安裝Celery)\n  * [安裝 ERLANG/OTP](#安裝ERLANG)\n  * [安裝 RabbitMQ](#安裝RabbitMQ)\n  * [Django project 文件設定](#Django)\n  * [啟動 worker](#啟動)\n  * [測試](#測試)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n下方內容如果有英文內容，那是從官方文件轉貼來，用來說明程式碼的。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\n[Django](https://www.djangoproject.com/): 1.8.17\n[Celery](http://docs.celeryproject.org/en/3.1/): 3.1.25 (最後支援 windows 的版本)\n[ERLANG/OTP](http://www.erlang.org/downloads): 19.3\n[RabbitMQ](https://www.rabbitmq.com/): 3.6.9\n\n## 建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a>\n#### 安裝 Celery <a href=\"#安裝Celery\" id=\"安裝Celery\">#</a>\n先安裝 Celery 3.1.25\n```\npip install celery==3.1.25\n```\n#### 安裝 ERLANG/OTP <a href=\"#安裝ERLANG\" id=\"安裝ERLANG\">#</a>\n在安裝 RabbitMQ 前要先去 [ERLANG/OTP](http://www.erlang.org/downloads) 官網下載來安裝。\n我是下載 ``OTP 19.3 Windows 64-bit Binary File (103012097)``\n\n#### 安裝 RabbitMQ <a href=\"#安裝RabbitMQ\" id=\"安裝RabbitMQ\">#</a>\n到 [RabbitMQ](https://www.rabbitmq.com/) 官網下載來安裝即可。\n\n#### Django project 文件設定 <a href=\"#Django\" id=\"Django\">#</a>\n我們現在的 Django project 結構如下\n```\nproj               # Django project\n├── manage.py\n├── myapp          # demo app\n└── proj\n```\n首先新增一個 celery.py\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py   # 新增\n\n```\n#### celery.py\n```\nfrom __future__ import absolute_import\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n\nfrom django.conf import settings  # noqa\n\napp = Celery('proj')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n```\n然後在 ``proj/proj/__int__.py`` 添加程式碼。讓我們能使用這個 celery app。\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py   # 這邊\n    ├── settings.py\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py\n```\n#### \\__int\\__.py\n```\nfrom __future__ import absolute_import\n\n# This will make sure the app is always imported when\n# Django starts so that shared_task will use this app.\nfrom .celery import app as celery_app  # noqa\n```\n<hr>\nNote that this example project layout is suitable for larger projects, for simple projects you may use a single contained module that defines both the app and tasks, like in the [First Steps with Celery](http://docs.celeryproject.org/en/3.1/getting-started/first-steps-with-celery.html#tut-celery) tutorial.\n\nLet's break down what happens in the first module, first we import absolute imports from the future, so that our celery.py module will not clash with the library:\n```\nfrom __future__ import absolute_import\n```\nThen we set the default ``DJANGO_SETTINGS_MODULE`` for the ``celery`` command-line program:\n```\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n```\nSpecifying the settings here means the celery command line program will know where your Django project is. This statement must always appear before the app instance is created, which is what we do next:\n```\napp = Celery('proj')\n```\nThis is your instance of the library, you can have many instances but there’s probably no reason for that when using Django.\n\nWe also add the Django settings module as a configuration source for Celery. This means that you don’t have to use multiple configuration files, and instead configure Celery directly from the Django settings.\n\nYou can pass the object directly here, but using a string is better since then the worker doesn’t have to serialize the object when using Windows or execv:\n````\napp.config_from_object('django.conf:settings')\n````\nNext, a common practice for reusable apps is to define all tasks in a separate tasks.py module, and Celery does have a way to autodiscover these modules:\n````\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n````\n<hr>\n接下來在 ``proj/proj/settings.py`` 添加 Celery 設定。\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py\n    ├── settings.py   # 這邊\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py\n```\n#### settings.py\n```\n# Celery settings\n# 如果rabbitmq運行在默認設置下，CELERY不需要其他信息，只要amqp://即可。\n# BROKER_URL = 'amqp://guest:guest@localhost:5672//'\nBROKER_URL = 'amqp://'\nCELERY_RESULT_BACKEND = 'amqp://'\n#: Only add pickle to this list if your broker is secured\n#: from unwanted access (see userguide/security.html)\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Taipei'\nCELERY_ENABLE_UTC = True\n```\n接下來到 ``proj/myapp`` 新增 task.py\n```\nproj\n├── manage.py\n├── myapp\n|   ├── __init__.py\n|   ├── admin.py\n|   ├── models.py\n|   ├── tests.py\n|   ├── view.py\n|   └── tasks.py       #新增\n└── proj\n```\n#### tasks.py\n```\nfrom __future__ import absolute_import\n\nfrom celery import shared_task\n\n@shared_task\ndef add(x, y):\n    return x + y\n\n@shared_task\ndef mul(x, y):\n    return x * y\n\n@shared_task\ndef xsum(numbers):\n    return sum(numbers)\n```\n#### 啟動 worker  <a href=\"#啟動\" id=\"啟動\">#</a>\n在平時使用 ``python manage.py runserver`` 的目錄下輸入指令即可啟動 celery worker\n```\ncelery -A pqrl worker -l info\n```\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/run_celery.png\" alt=\"啟動成功畫面\" width=\"50%\" height=\"50%\" />\n#### 測試 <a href=\"#測試\" id=\"測試\">#</a>\n接下來測試是否能運行。再開啟一個 cmd。\n```\npython manage.py shell\n```\n進入 shell 後，輸入命令。\n```\nfrom myapp.tasks import add\nadd(5,5)\n>> 10\nresults = add.delay(5,5)   # 加了.delay 後會發現 worker 開始運作\nresults.get()\n>> 10\n```\n成功運行。\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[First steps with Django](http://docs.celeryproject.org/en/3.1/django/first-steps-with-django.html#using-celery-with-django)","source":"_posts/Django-Celery-in-windows.md","raw":"---\ntitle: Django + Celery in windows\ndate: 2017-04-22 19:05:26\ncategories: [Python, Django]\ntags: [Python, Django, Celery]\n---\n\n最新版的 Celery 不支援 Windows，網路上教學大部分都是Linux系統，想讓它動起來花了點心力，這邊紀錄一下過程。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [建立流程](#建立流程)\n  * [安裝 Celery](#安裝Celery)\n  * [安裝 ERLANG/OTP](#安裝ERLANG)\n  * [安裝 RabbitMQ](#安裝RabbitMQ)\n  * [Django project 文件設定](#Django)\n  * [啟動 worker](#啟動)\n  * [測試](#測試)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n下方內容如果有英文內容，那是從官方文件轉貼來，用來說明程式碼的。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\n[Django](https://www.djangoproject.com/): 1.8.17\n[Celery](http://docs.celeryproject.org/en/3.1/): 3.1.25 (最後支援 windows 的版本)\n[ERLANG/OTP](http://www.erlang.org/downloads): 19.3\n[RabbitMQ](https://www.rabbitmq.com/): 3.6.9\n\n## 建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a>\n#### 安裝 Celery <a href=\"#安裝Celery\" id=\"安裝Celery\">#</a>\n先安裝 Celery 3.1.25\n```\npip install celery==3.1.25\n```\n#### 安裝 ERLANG/OTP <a href=\"#安裝ERLANG\" id=\"安裝ERLANG\">#</a>\n在安裝 RabbitMQ 前要先去 [ERLANG/OTP](http://www.erlang.org/downloads) 官網下載來安裝。\n我是下載 ``OTP 19.3 Windows 64-bit Binary File (103012097)``\n\n#### 安裝 RabbitMQ <a href=\"#安裝RabbitMQ\" id=\"安裝RabbitMQ\">#</a>\n到 [RabbitMQ](https://www.rabbitmq.com/) 官網下載來安裝即可。\n\n#### Django project 文件設定 <a href=\"#Django\" id=\"Django\">#</a>\n我們現在的 Django project 結構如下\n```\nproj               # Django project\n├── manage.py\n├── myapp          # demo app\n└── proj\n```\n首先新增一個 celery.py\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py   # 新增\n\n```\n#### celery.py\n```\nfrom __future__ import absolute_import\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n\nfrom django.conf import settings  # noqa\n\napp = Celery('proj')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n```\n然後在 ``proj/proj/__int__.py`` 添加程式碼。讓我們能使用這個 celery app。\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py   # 這邊\n    ├── settings.py\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py\n```\n#### \\__int\\__.py\n```\nfrom __future__ import absolute_import\n\n# This will make sure the app is always imported when\n# Django starts so that shared_task will use this app.\nfrom .celery import app as celery_app  # noqa\n```\n<hr>\nNote that this example project layout is suitable for larger projects, for simple projects you may use a single contained module that defines both the app and tasks, like in the [First Steps with Celery](http://docs.celeryproject.org/en/3.1/getting-started/first-steps-with-celery.html#tut-celery) tutorial.\n\nLet's break down what happens in the first module, first we import absolute imports from the future, so that our celery.py module will not clash with the library:\n```\nfrom __future__ import absolute_import\n```\nThen we set the default ``DJANGO_SETTINGS_MODULE`` for the ``celery`` command-line program:\n```\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n```\nSpecifying the settings here means the celery command line program will know where your Django project is. This statement must always appear before the app instance is created, which is what we do next:\n```\napp = Celery('proj')\n```\nThis is your instance of the library, you can have many instances but there’s probably no reason for that when using Django.\n\nWe also add the Django settings module as a configuration source for Celery. This means that you don’t have to use multiple configuration files, and instead configure Celery directly from the Django settings.\n\nYou can pass the object directly here, but using a string is better since then the worker doesn’t have to serialize the object when using Windows or execv:\n````\napp.config_from_object('django.conf:settings')\n````\nNext, a common practice for reusable apps is to define all tasks in a separate tasks.py module, and Celery does have a way to autodiscover these modules:\n````\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n````\n<hr>\n接下來在 ``proj/proj/settings.py`` 添加 Celery 設定。\n```\nproj\n├── manage.py\n├── myapp\n└── proj\n    ├── __init__.py\n    ├── settings.py   # 這邊\n    ├── urls.py\n    ├── views.py\n    ├── wsgi.py\n    └── celery.py\n```\n#### settings.py\n```\n# Celery settings\n# 如果rabbitmq運行在默認設置下，CELERY不需要其他信息，只要amqp://即可。\n# BROKER_URL = 'amqp://guest:guest@localhost:5672//'\nBROKER_URL = 'amqp://'\nCELERY_RESULT_BACKEND = 'amqp://'\n#: Only add pickle to this list if your broker is secured\n#: from unwanted access (see userguide/security.html)\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Taipei'\nCELERY_ENABLE_UTC = True\n```\n接下來到 ``proj/myapp`` 新增 task.py\n```\nproj\n├── manage.py\n├── myapp\n|   ├── __init__.py\n|   ├── admin.py\n|   ├── models.py\n|   ├── tests.py\n|   ├── view.py\n|   └── tasks.py       #新增\n└── proj\n```\n#### tasks.py\n```\nfrom __future__ import absolute_import\n\nfrom celery import shared_task\n\n@shared_task\ndef add(x, y):\n    return x + y\n\n@shared_task\ndef mul(x, y):\n    return x * y\n\n@shared_task\ndef xsum(numbers):\n    return sum(numbers)\n```\n#### 啟動 worker  <a href=\"#啟動\" id=\"啟動\">#</a>\n在平時使用 ``python manage.py runserver`` 的目錄下輸入指令即可啟動 celery worker\n```\ncelery -A pqrl worker -l info\n```\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/run_celery.png\" alt=\"啟動成功畫面\" width=\"50%\" height=\"50%\" />\n#### 測試 <a href=\"#測試\" id=\"測試\">#</a>\n接下來測試是否能運行。再開啟一個 cmd。\n```\npython manage.py shell\n```\n進入 shell 後，輸入命令。\n```\nfrom myapp.tasks import add\nadd(5,5)\n>> 10\nresults = add.delay(5,5)   # 加了.delay 後會發現 worker 開始運作\nresults.get()\n>> 10\n```\n成功運行。\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[First steps with Django](http://docs.celeryproject.org/en/3.1/django/first-steps-with-django.html#using-celery-with-django)","slug":"Django-Celery-in-windows","published":1,"updated":"2017-04-23T16:56:45.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1vvcgvr000130rq47ef0ox5","content":"<p>最新版的 Celery 不支援 Windows，網路上教學大部分都是Linux系統，想讓它動起來花了點心力，這邊紀錄一下過程。<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#建立流程\">建立流程</a><ul>\n<li><a href=\"#安裝Celery\">安裝 Celery</a></li>\n<li><a href=\"#安裝ERLANG\">安裝 ERLANG/OTP</a></li>\n<li><a href=\"#安裝RabbitMQ\">安裝 RabbitMQ</a></li>\n<li><a href=\"#Django\">Django project 文件設定</a></li>\n<li><a href=\"#啟動\">啟動 worker</a></li>\n<li><a href=\"#測試\">測試</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>下方內容如果有英文內容，那是從官方文件轉貼來，用來說明程式碼的。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br><a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"external\">Django</a>: 1.8.17<br><a href=\"http://docs.celeryproject.org/en/3.1/\" target=\"_blank\" rel=\"external\">Celery</a>: 3.1.25 (最後支援 windows 的版本)<br><a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"external\">ERLANG/OTP</a>: 19.3<br><a href=\"https://www.rabbitmq.com/\" target=\"_blank\" rel=\"external\">RabbitMQ</a>: 3.6.9</p>\n<h2 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程 #\"></a>建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a></h2><h4 id=\"安裝-Celery\"><a href=\"#安裝-Celery\" class=\"headerlink\" title=\"安裝 Celery #\"></a>安裝 Celery <a href=\"#安裝Celery\" id=\"安裝Celery\">#</a></h4><p>先安裝 Celery 3.1.25<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install celery==3.1.25</div></pre></td></tr></table></figure></p>\n<h4 id=\"安裝-ERLANG-OTP\"><a href=\"#安裝-ERLANG-OTP\" class=\"headerlink\" title=\"安裝 ERLANG/OTP #\"></a>安裝 ERLANG/OTP <a href=\"#安裝ERLANG\" id=\"安裝ERLANG\">#</a></h4><p>在安裝 RabbitMQ 前要先去 <a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"external\">ERLANG/OTP</a> 官網下載來安裝。<br>我是下載 <code>OTP 19.3 Windows 64-bit Binary File (103012097)</code></p>\n<h4 id=\"安裝-RabbitMQ\"><a href=\"#安裝-RabbitMQ\" class=\"headerlink\" title=\"安裝 RabbitMQ #\"></a>安裝 RabbitMQ <a href=\"#安裝RabbitMQ\" id=\"安裝RabbitMQ\">#</a></h4><p>到 <a href=\"https://www.rabbitmq.com/\" target=\"_blank\" rel=\"external\">RabbitMQ</a> 官網下載來安裝即可。</p>\n<h4 id=\"Django-project-文件設定\"><a href=\"#Django-project-文件設定\" class=\"headerlink\" title=\"Django project 文件設定 #\"></a>Django project 文件設定 <a href=\"#Django\" id=\"Django\">#</a></h4><p>我們現在的 Django project 結構如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj               # Django project</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp          # demo app</div><div class=\"line\">└── proj</div></pre></td></tr></table></figure></p>\n<p>首先新增一個 celery.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py</div><div class=\"line\">    ├── settings.py</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py   # 新增</div></pre></td></tr></table></figure></p>\n<h4 id=\"celery-py\"><a href=\"#celery-py\" class=\"headerlink\" title=\"celery.py\"></a>celery.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\">import os</div><div class=\"line\">from celery import Celery</div><div class=\"line\"></div><div class=\"line\"># set the default Django settings module for the &apos;celery&apos; program.</div><div class=\"line\">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;proj.settings&apos;)</div><div class=\"line\"></div><div class=\"line\">from django.conf import settings  # noqa</div><div class=\"line\"></div><div class=\"line\">app = Celery(&apos;proj&apos;)</div><div class=\"line\"></div><div class=\"line\"># Using a string here means the worker will not have to</div><div class=\"line\"># pickle the object when using Windows.</div><div class=\"line\">app.config_from_object(&apos;django.conf:settings&apos;)</div><div class=\"line\">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div><div class=\"line\"></div><div class=\"line\">@app.task(bind=True)</div><div class=\"line\">def debug_task(self):</div><div class=\"line\">    print(&apos;Request: &#123;0!r&#125;&apos;.format(self.request))</div></pre></td></tr></table></figure>\n<p>然後在 <code>proj/proj/__int__.py</code> 添加程式碼。讓我們能使用這個 celery app。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py   # 這邊</div><div class=\"line\">    ├── settings.py</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"int-py\"><a href=\"#int-py\" class=\"headerlink\" title=\"__int__.py\"></a>__int__.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\"></div><div class=\"line\"># This will make sure the app is always imported when</div><div class=\"line\"># Django starts so that shared_task will use this app.</div><div class=\"line\">from .celery import app as celery_app  # noqa</div></pre></td></tr></table></figure>\n<p><hr><br>Note that this example project layout is suitable for larger projects, for simple projects you may use a single contained module that defines both the app and tasks, like in the <a href=\"http://docs.celeryproject.org/en/3.1/getting-started/first-steps-with-celery.html#tut-celery\" target=\"_blank\" rel=\"external\">First Steps with Celery</a> tutorial.</p>\n<p>Let’s break down what happens in the first module, first we import absolute imports from the future, so that our celery.py module will not clash with the library:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div></pre></td></tr></table></figure></p>\n<p>Then we set the default <code>DJANGO_SETTINGS_MODULE</code> for the <code>celery</code> command-line program:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;proj.settings&apos;)</div></pre></td></tr></table></figure></p>\n<p>Specifying the settings here means the celery command line program will know where your Django project is. This statement must always appear before the app instance is created, which is what we do next:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app = Celery(&apos;proj&apos;)</div></pre></td></tr></table></figure></p>\n<p>This is your instance of the library, you can have many instances but there’s probably no reason for that when using Django.</p>\n<p>We also add the Django settings module as a configuration source for Celery. This means that you don’t have to use multiple configuration files, and instead configure Celery directly from the Django settings.</p>\n<p>You can pass the object directly here, but using a string is better since then the worker doesn’t have to serialize the object when using Windows or execv:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.config_from_object(&apos;django.conf:settings&apos;)</div></pre></td></tr></table></figure></p>\n<p>Next, a common practice for reusable apps is to define all tasks in a separate tasks.py module, and Celery does have a way to autodiscover these modules:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure></p>\n<p><hr><br>接下來在 <code>proj/proj/settings.py</code> 添加 Celery 設定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py</div><div class=\"line\">    ├── settings.py   # 這邊</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Celery settings</div><div class=\"line\"># 如果rabbitmq運行在默認設置下，CELERY不需要其他信息，只要amqp://即可。</div><div class=\"line\"># BROKER_URL = &apos;amqp://guest:guest@localhost:5672//&apos;</div><div class=\"line\">BROKER_URL = &apos;amqp://&apos;</div><div class=\"line\">CELERY_RESULT_BACKEND = &apos;amqp://&apos;</div><div class=\"line\">#: Only add pickle to this list if your broker is secured</div><div class=\"line\">#: from unwanted access (see userguide/security.html)</div><div class=\"line\">CELERY_ACCEPT_CONTENT = [&apos;json&apos;]</div><div class=\"line\">CELERY_TASK_SERIALIZER = &apos;json&apos;</div><div class=\"line\">CELERY_RESULT_SERIALIZER = &apos;json&apos;</div><div class=\"line\">CELERY_TIMEZONE = &apos;Asia/Taipei&apos;</div><div class=\"line\">CELERY_ENABLE_UTC = True</div></pre></td></tr></table></figure>\n<p>接下來到 <code>proj/myapp</code> 新增 task.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">|   ├── __init__.py</div><div class=\"line\">|   ├── admin.py</div><div class=\"line\">|   ├── models.py</div><div class=\"line\">|   ├── tests.py</div><div class=\"line\">|   ├── view.py</div><div class=\"line\">|   └── tasks.py       #新增</div><div class=\"line\">└── proj</div></pre></td></tr></table></figure></p>\n<h4 id=\"tasks-py\"><a href=\"#tasks-py\" class=\"headerlink\" title=\"tasks.py\"></a>tasks.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\"></div><div class=\"line\">from celery import shared_task</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def add(x, y):</div><div class=\"line\">    return x + y</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def mul(x, y):</div><div class=\"line\">    return x * y</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def xsum(numbers):</div><div class=\"line\">    return sum(numbers)</div></pre></td></tr></table></figure>\n<h4 id=\"啟動-worker\"><a href=\"#啟動-worker\" class=\"headerlink\" title=\"啟動 worker  #\"></a>啟動 worker  <a href=\"#啟動\" id=\"啟動\">#</a></h4><p>在平時使用 <code>python manage.py runserver</code> 的目錄下輸入指令即可啟動 celery worker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery -A pqrl worker -l info</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/run_celery.png\" alt=\"啟動成功畫面\" width=\"50%\" height=\"50%\"></p>\n<h4 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試 #\"></a>測試 <a href=\"#測試\" id=\"測試\">#</a></h4><p>接下來測試是否能運行。再開啟一個 cmd。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py shell</div></pre></td></tr></table></figure></p>\n<p>進入 shell 後，輸入命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">from myapp.tasks import add</div><div class=\"line\">add(5,5)</div><div class=\"line\">&gt;&gt; 10</div><div class=\"line\">results = add.delay(5,5)   # 加了.delay 後會發現 worker 開始運作</div><div class=\"line\">results.get()</div><div class=\"line\">&gt;&gt; 10</div></pre></td></tr></table></figure></p>\n<p>成功運行。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://docs.celeryproject.org/en/3.1/django/first-steps-with-django.html#using-celery-with-django\" target=\"_blank\" rel=\"external\">First steps with Django</a></p>\n","site":{"data":{}},"excerpt":"<p>最新版的 Celery 不支援 Windows，網路上教學大部分都是Linux系統，想讓它動起來花了點心力，這邊紀錄一下過程。<br>","more":"</p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#建立流程\">建立流程</a><ul>\n<li><a href=\"#安裝Celery\">安裝 Celery</a></li>\n<li><a href=\"#安裝ERLANG\">安裝 ERLANG/OTP</a></li>\n<li><a href=\"#安裝RabbitMQ\">安裝 RabbitMQ</a></li>\n<li><a href=\"#Django\">Django project 文件設定</a></li>\n<li><a href=\"#啟動\">啟動 worker</a></li>\n<li><a href=\"#測試\">測試</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>下方內容如果有英文內容，那是從官方文件轉貼來，用來說明程式碼的。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br><a href=\"https://www.djangoproject.com/\">Django</a>: 1.8.17<br><a href=\"http://docs.celeryproject.org/en/3.1/\">Celery</a>: 3.1.25 (最後支援 windows 的版本)<br><a href=\"http://www.erlang.org/downloads\">ERLANG/OTP</a>: 19.3<br><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a>: 3.6.9</p>\n<h2 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程 #\"></a>建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a></h2><h4 id=\"安裝-Celery\"><a href=\"#安裝-Celery\" class=\"headerlink\" title=\"安裝 Celery #\"></a>安裝 Celery <a href=\"#安裝Celery\" id=\"安裝Celery\">#</a></h4><p>先安裝 Celery 3.1.25<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install celery==3.1.25</div></pre></td></tr></table></figure></p>\n<h4 id=\"安裝-ERLANG-OTP\"><a href=\"#安裝-ERLANG-OTP\" class=\"headerlink\" title=\"安裝 ERLANG/OTP #\"></a>安裝 ERLANG/OTP <a href=\"#安裝ERLANG\" id=\"安裝ERLANG\">#</a></h4><p>在安裝 RabbitMQ 前要先去 <a href=\"http://www.erlang.org/downloads\">ERLANG/OTP</a> 官網下載來安裝。<br>我是下載 <code>OTP 19.3 Windows 64-bit Binary File (103012097)</code></p>\n<h4 id=\"安裝-RabbitMQ\"><a href=\"#安裝-RabbitMQ\" class=\"headerlink\" title=\"安裝 RabbitMQ #\"></a>安裝 RabbitMQ <a href=\"#安裝RabbitMQ\" id=\"安裝RabbitMQ\">#</a></h4><p>到 <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a> 官網下載來安裝即可。</p>\n<h4 id=\"Django-project-文件設定\"><a href=\"#Django-project-文件設定\" class=\"headerlink\" title=\"Django project 文件設定 #\"></a>Django project 文件設定 <a href=\"#Django\" id=\"Django\">#</a></h4><p>我們現在的 Django project 結構如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj               # Django project</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp          # demo app</div><div class=\"line\">└── proj</div></pre></td></tr></table></figure></p>\n<p>首先新增一個 celery.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py</div><div class=\"line\">    ├── settings.py</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py   # 新增</div></pre></td></tr></table></figure></p>\n<h4 id=\"celery-py\"><a href=\"#celery-py\" class=\"headerlink\" title=\"celery.py\"></a>celery.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\">import os</div><div class=\"line\">from celery import Celery</div><div class=\"line\"></div><div class=\"line\"># set the default Django settings module for the &apos;celery&apos; program.</div><div class=\"line\">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;proj.settings&apos;)</div><div class=\"line\"></div><div class=\"line\">from django.conf import settings  # noqa</div><div class=\"line\"></div><div class=\"line\">app = Celery(&apos;proj&apos;)</div><div class=\"line\"></div><div class=\"line\"># Using a string here means the worker will not have to</div><div class=\"line\"># pickle the object when using Windows.</div><div class=\"line\">app.config_from_object(&apos;django.conf:settings&apos;)</div><div class=\"line\">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div><div class=\"line\"></div><div class=\"line\">@app.task(bind=True)</div><div class=\"line\">def debug_task(self):</div><div class=\"line\">    print(&apos;Request: &#123;0!r&#125;&apos;.format(self.request))</div></pre></td></tr></table></figure>\n<p>然後在 <code>proj/proj/__int__.py</code> 添加程式碼。讓我們能使用這個 celery app。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py   # 這邊</div><div class=\"line\">    ├── settings.py</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"int-py\"><a href=\"#int-py\" class=\"headerlink\" title=\"__int__.py\"></a>__int__.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\"></div><div class=\"line\"># This will make sure the app is always imported when</div><div class=\"line\"># Django starts so that shared_task will use this app.</div><div class=\"line\">from .celery import app as celery_app  # noqa</div></pre></td></tr></table></figure>\n<p><hr><br>Note that this example project layout is suitable for larger projects, for simple projects you may use a single contained module that defines both the app and tasks, like in the <a href=\"http://docs.celeryproject.org/en/3.1/getting-started/first-steps-with-celery.html#tut-celery\">First Steps with Celery</a> tutorial.</p>\n<p>Let’s break down what happens in the first module, first we import absolute imports from the future, so that our celery.py module will not clash with the library:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div></pre></td></tr></table></figure></p>\n<p>Then we set the default <code>DJANGO_SETTINGS_MODULE</code> for the <code>celery</code> command-line program:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.environ.setdefault(&apos;DJANGO_SETTINGS_MODULE&apos;, &apos;proj.settings&apos;)</div></pre></td></tr></table></figure></p>\n<p>Specifying the settings here means the celery command line program will know where your Django project is. This statement must always appear before the app instance is created, which is what we do next:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app = Celery(&apos;proj&apos;)</div></pre></td></tr></table></figure></p>\n<p>This is your instance of the library, you can have many instances but there’s probably no reason for that when using Django.</p>\n<p>We also add the Django settings module as a configuration source for Celery. This means that you don’t have to use multiple configuration files, and instead configure Celery directly from the Django settings.</p>\n<p>You can pass the object directly here, but using a string is better since then the worker doesn’t have to serialize the object when using Windows or execv:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.config_from_object(&apos;django.conf:settings&apos;)</div></pre></td></tr></table></figure></p>\n<p>Next, a common practice for reusable apps is to define all tasks in a separate tasks.py module, and Celery does have a way to autodiscover these modules:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure></p>\n<p><hr><br>接下來在 <code>proj/proj/settings.py</code> 添加 Celery 設定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">└── proj</div><div class=\"line\">    ├── __init__.py</div><div class=\"line\">    ├── settings.py   # 這邊</div><div class=\"line\">    ├── urls.py</div><div class=\"line\">    ├── views.py</div><div class=\"line\">    ├── wsgi.py</div><div class=\"line\">    └── celery.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Celery settings</div><div class=\"line\"># 如果rabbitmq運行在默認設置下，CELERY不需要其他信息，只要amqp://即可。</div><div class=\"line\"># BROKER_URL = &apos;amqp://guest:guest@localhost:5672//&apos;</div><div class=\"line\">BROKER_URL = &apos;amqp://&apos;</div><div class=\"line\">CELERY_RESULT_BACKEND = &apos;amqp://&apos;</div><div class=\"line\">#: Only add pickle to this list if your broker is secured</div><div class=\"line\">#: from unwanted access (see userguide/security.html)</div><div class=\"line\">CELERY_ACCEPT_CONTENT = [&apos;json&apos;]</div><div class=\"line\">CELERY_TASK_SERIALIZER = &apos;json&apos;</div><div class=\"line\">CELERY_RESULT_SERIALIZER = &apos;json&apos;</div><div class=\"line\">CELERY_TIMEZONE = &apos;Asia/Taipei&apos;</div><div class=\"line\">CELERY_ENABLE_UTC = True</div></pre></td></tr></table></figure>\n<p>接下來到 <code>proj/myapp</code> 新增 task.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj</div><div class=\"line\">├── manage.py</div><div class=\"line\">├── myapp</div><div class=\"line\">|   ├── __init__.py</div><div class=\"line\">|   ├── admin.py</div><div class=\"line\">|   ├── models.py</div><div class=\"line\">|   ├── tests.py</div><div class=\"line\">|   ├── view.py</div><div class=\"line\">|   └── tasks.py       #新增</div><div class=\"line\">└── proj</div></pre></td></tr></table></figure></p>\n<h4 id=\"tasks-py\"><a href=\"#tasks-py\" class=\"headerlink\" title=\"tasks.py\"></a>tasks.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">from __future__ import absolute_import</div><div class=\"line\"></div><div class=\"line\">from celery import shared_task</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def add(x, y):</div><div class=\"line\">    return x + y</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def mul(x, y):</div><div class=\"line\">    return x * y</div><div class=\"line\"></div><div class=\"line\">@shared_task</div><div class=\"line\">def xsum(numbers):</div><div class=\"line\">    return sum(numbers)</div></pre></td></tr></table></figure>\n<h4 id=\"啟動-worker\"><a href=\"#啟動-worker\" class=\"headerlink\" title=\"啟動 worker  #\"></a>啟動 worker  <a href=\"#啟動\" id=\"啟動\">#</a></h4><p>在平時使用 <code>python manage.py runserver</code> 的目錄下輸入指令即可啟動 celery worker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery -A pqrl worker -l info</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/run_celery.png\" alt=\"啟動成功畫面\" width=\"50%\" height=\"50%\" /></p>\n<h4 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試 #\"></a>測試 <a href=\"#測試\" id=\"測試\">#</a></h4><p>接下來測試是否能運行。再開啟一個 cmd。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py shell</div></pre></td></tr></table></figure></p>\n<p>進入 shell 後，輸入命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">from myapp.tasks import add</div><div class=\"line\">add(5,5)</div><div class=\"line\">&gt;&gt; 10</div><div class=\"line\">results = add.delay(5,5)   # 加了.delay 後會發現 worker 開始運作</div><div class=\"line\">results.get()</div><div class=\"line\">&gt;&gt; 10</div></pre></td></tr></table></figure></p>\n<p>成功運行。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://docs.celeryproject.org/en/3.1/django/first-steps-with-django.html#using-celery-with-django\">First steps with Django</a></p>"},{"title":"Flush output of Python print","date":"2017-04-23T11:10:40.000Z","_content":"\n這邊紀錄如何將 print 的值 flush 到 output file 中。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [程式碼](#程式碼)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n這邊主要是提供一個將 print 值 flush 到一個檔案中的方法。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\nPython 2.7\n\n## 程式碼 <a href=\"#程式碼\" id=\"程式碼\">#</a>\n現在的結構如下\n```\ndir\n├── func.py     # function\n├── main.py     # 主程式\n└── output.txt  # 將執行結果輸出到這裡\n```\n#### func.py\n```\nimport sys\nclass flushfile(object):\n    def __init__(self, f):\n        self.f = f\n    def __getattr__(self,name):\n        return object.__getattribute__(self.f, name)\n    def write(self, x):\n        self.f.write(x)\n        self.f.flush()\n    def close(self):\n        self.f.close()\nimport time\ndef sleep():\n    for i in xrange(10):\n        time.sleep(0.5)\n        print 'test',i+1\n```\n#### main.py\n```\nimport sys\nfrom func import flushfile, sleep\n#----------------------------#\norig_stdout = sys.stdout # open\nsys.stdout = open(dir_path + \"output.txt\",\"w\")\n#----------------------------#\nsys.stdout = flushfile(sys.stdout)\nr = sleep()\n#----------------------------#\nsys.stdout.close() # close\nsys.stdout = orig_stdout\n#----------------------------#\n```\n#### output.txt\n```\ntest 1\ntest 2\ntest 3\ntest 4\ntest 5\ntest 6\ntest 7\ntest 8\ntest 9\ntest 10\n```\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[How to flush output of Python print?](http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print/231216#231216)\n[[Python] \\__getattr\\__() 與 \\__getattribute\\__() 的差別](http://ephrain.pixnet.net/blog/post/60371176-%5Bpython%5D-__getattr__%28%29-%E8%88%87-__getattribute__%28%29-%E7%9A%84%E5%B7%AE%E5%88%A5)","source":"_posts/Flush-output-of-Python-print.md","raw":"---\ntitle: Flush output of Python print\ndate: 2017-04-23 19:10:40\ncategories: Python\ntags: Python\n---\n\n這邊紀錄如何將 print 的值 flush 到 output file 中。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [程式碼](#程式碼)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n這邊主要是提供一個將 print 值 flush 到一個檔案中的方法。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\nPython 2.7\n\n## 程式碼 <a href=\"#程式碼\" id=\"程式碼\">#</a>\n現在的結構如下\n```\ndir\n├── func.py     # function\n├── main.py     # 主程式\n└── output.txt  # 將執行結果輸出到這裡\n```\n#### func.py\n```\nimport sys\nclass flushfile(object):\n    def __init__(self, f):\n        self.f = f\n    def __getattr__(self,name):\n        return object.__getattribute__(self.f, name)\n    def write(self, x):\n        self.f.write(x)\n        self.f.flush()\n    def close(self):\n        self.f.close()\nimport time\ndef sleep():\n    for i in xrange(10):\n        time.sleep(0.5)\n        print 'test',i+1\n```\n#### main.py\n```\nimport sys\nfrom func import flushfile, sleep\n#----------------------------#\norig_stdout = sys.stdout # open\nsys.stdout = open(dir_path + \"output.txt\",\"w\")\n#----------------------------#\nsys.stdout = flushfile(sys.stdout)\nr = sleep()\n#----------------------------#\nsys.stdout.close() # close\nsys.stdout = orig_stdout\n#----------------------------#\n```\n#### output.txt\n```\ntest 1\ntest 2\ntest 3\ntest 4\ntest 5\ntest 6\ntest 7\ntest 8\ntest 9\ntest 10\n```\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[How to flush output of Python print?](http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print/231216#231216)\n[[Python] \\__getattr\\__() 與 \\__getattribute\\__() 的差別](http://ephrain.pixnet.net/blog/post/60371176-%5Bpython%5D-__getattr__%28%29-%E8%88%87-__getattribute__%28%29-%E7%9A%84%E5%B7%AE%E5%88%A5)","slug":"Flush-output-of-Python-print","published":1,"updated":"2017-04-23T16:56:12.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1vvcgw1000430rqes3hesjn","content":"<p>這邊紀錄如何將 print 的值 flush 到 output file 中。<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#程式碼\">程式碼</a></li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>這邊主要是提供一個將 print 值 flush 到一個檔案中的方法。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br>Python 2.7</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼 #\"></a>程式碼 <a href=\"#程式碼\" id=\"程式碼\">#</a></h2><p>現在的結構如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dir</div><div class=\"line\">├── func.py     # function</div><div class=\"line\">├── main.py     # 主程式</div><div class=\"line\">└── output.txt  # 將執行結果輸出到這裡</div></pre></td></tr></table></figure></p>\n<h4 id=\"func-py\"><a href=\"#func-py\" class=\"headerlink\" title=\"func.py\"></a>func.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">class flushfile(object):</div><div class=\"line\">    def __init__(self, f):</div><div class=\"line\">        self.f = f</div><div class=\"line\">    def __getattr__(self,name):</div><div class=\"line\">        return object.__getattribute__(self.f, name)</div><div class=\"line\">    def write(self, x):</div><div class=\"line\">        self.f.write(x)</div><div class=\"line\">        self.f.flush()</div><div class=\"line\">    def close(self):</div><div class=\"line\">        self.f.close()</div><div class=\"line\">import time</div><div class=\"line\">def sleep():</div><div class=\"line\">    for i in xrange(10):</div><div class=\"line\">        time.sleep(0.5)</div><div class=\"line\">        print &apos;test&apos;,i+1</div></pre></td></tr></table></figure>\n<h4 id=\"main-py\"><a href=\"#main-py\" class=\"headerlink\" title=\"main.py\"></a>main.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">from func import flushfile, sleep</div><div class=\"line\">#----------------------------#</div><div class=\"line\">orig_stdout = sys.stdout # open</div><div class=\"line\">sys.stdout = open(dir_path + &quot;output.txt&quot;,&quot;w&quot;)</div><div class=\"line\">#----------------------------#</div><div class=\"line\">sys.stdout = flushfile(sys.stdout)</div><div class=\"line\">r = sleep()</div><div class=\"line\">#----------------------------#</div><div class=\"line\">sys.stdout.close() # close</div><div class=\"line\">sys.stdout = orig_stdout</div><div class=\"line\">#----------------------------#</div></pre></td></tr></table></figure>\n<h4 id=\"output-txt\"><a href=\"#output-txt\" class=\"headerlink\" title=\"output.txt\"></a>output.txt</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">test 1</div><div class=\"line\">test 2</div><div class=\"line\">test 3</div><div class=\"line\">test 4</div><div class=\"line\">test 5</div><div class=\"line\">test 6</div><div class=\"line\">test 7</div><div class=\"line\">test 8</div><div class=\"line\">test 9</div><div class=\"line\">test 10</div></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print/231216#231216\" target=\"_blank\" rel=\"external\">How to flush output of Python print?</a><br><a href=\"http://ephrain.pixnet.net/blog/post/60371176-%5Bpython%5D-__getattr__%28%29-%E8%88%87-__getattribute__%28%29-%E7%9A%84%E5%B7%AE%E5%88%A5\" target=\"_blank\" rel=\"external\">[Python] __getattr__() 與 __getattribute__() 的差別</a></p>\n","site":{"data":{}},"excerpt":"<p>這邊紀錄如何將 print 的值 flush 到 output file 中。<br>","more":"</p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#程式碼\">程式碼</a></li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>這邊主要是提供一個將 print 值 flush 到一個檔案中的方法。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br>Python 2.7</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼 #\"></a>程式碼 <a href=\"#程式碼\" id=\"程式碼\">#</a></h2><p>現在的結構如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dir</div><div class=\"line\">├── func.py     # function</div><div class=\"line\">├── main.py     # 主程式</div><div class=\"line\">└── output.txt  # 將執行結果輸出到這裡</div></pre></td></tr></table></figure></p>\n<h4 id=\"func-py\"><a href=\"#func-py\" class=\"headerlink\" title=\"func.py\"></a>func.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">class flushfile(object):</div><div class=\"line\">    def __init__(self, f):</div><div class=\"line\">        self.f = f</div><div class=\"line\">    def __getattr__(self,name):</div><div class=\"line\">        return object.__getattribute__(self.f, name)</div><div class=\"line\">    def write(self, x):</div><div class=\"line\">        self.f.write(x)</div><div class=\"line\">        self.f.flush()</div><div class=\"line\">    def close(self):</div><div class=\"line\">        self.f.close()</div><div class=\"line\">import time</div><div class=\"line\">def sleep():</div><div class=\"line\">    for i in xrange(10):</div><div class=\"line\">        time.sleep(0.5)</div><div class=\"line\">        print &apos;test&apos;,i+1</div></pre></td></tr></table></figure>\n<h4 id=\"main-py\"><a href=\"#main-py\" class=\"headerlink\" title=\"main.py\"></a>main.py</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys</div><div class=\"line\">from func import flushfile, sleep</div><div class=\"line\">#----------------------------#</div><div class=\"line\">orig_stdout = sys.stdout # open</div><div class=\"line\">sys.stdout = open(dir_path + &quot;output.txt&quot;,&quot;w&quot;)</div><div class=\"line\">#----------------------------#</div><div class=\"line\">sys.stdout = flushfile(sys.stdout)</div><div class=\"line\">r = sleep()</div><div class=\"line\">#----------------------------#</div><div class=\"line\">sys.stdout.close() # close</div><div class=\"line\">sys.stdout = orig_stdout</div><div class=\"line\">#----------------------------#</div></pre></td></tr></table></figure>\n<h4 id=\"output-txt\"><a href=\"#output-txt\" class=\"headerlink\" title=\"output.txt\"></a>output.txt</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">test 1</div><div class=\"line\">test 2</div><div class=\"line\">test 3</div><div class=\"line\">test 4</div><div class=\"line\">test 5</div><div class=\"line\">test 6</div><div class=\"line\">test 7</div><div class=\"line\">test 8</div><div class=\"line\">test 9</div><div class=\"line\">test 10</div></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print/231216#231216\">How to flush output of Python print?</a><br><a href=\"http://ephrain.pixnet.net/blog/post/60371176-%5Bpython%5D-__getattr__%28%29-%E8%88%87-__getattribute__%28%29-%E7%9A%84%E5%B7%AE%E5%88%A5\">[Python] __getattr__() 與 __getattribute__() 的差別</a></p>"},{"title":"Hexo + Github 簡單使用教學","date":"2017-04-21T13:03:41.000Z","_content":"\n這邊主要就紀錄我使用 Hexo 部署到 Github 上的流程。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [建立流程](#建立流程)\n  * [安裝 Node.js](#安裝Node)\n  * [安裝 Github Desktop](#安裝Github)\n  * [Github Desktop 使用](#Github使用)\n  * [安裝 Hexo](#安裝Hexo)\n  * [部署 Hexo 到 Github](#部署Hexo)\n* [自訂義部分](#自訂義部分)\n  * [程式碼區塊](#程式碼區塊)\n  * [字體](#字體)\n  * [Newer Older 相反](#相反)\n* [常用 Hexo 指令](#常用指令)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n因為第一次使用 Github，Node.js 和 Hexo，所以只有會一點基礎東西。\n主要是幫助從沒接觸過的人能快速上手。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\n[Hexo](https://hexo.io/zh-tw/): 3.3.1\n[Node.js](https://nodejs.org/en/): 6.10.2 LTS\n[Github Desktop](https://desktop.github.com/)\n\n## 建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a>\n#### 安裝 Node.js <a href=\"#安裝Node\" id=\"安裝Node\">#</a>\n去 [Node.js](https://nodejs.org/en/) 官網下載 windows x64 版本直接安裝即可。\n```\n$ node -v   # 可測試是否安裝成功\n>> v6.10.2\n```\n#### 安裝 Github Desktop <a href=\"#安裝Github\" id=\"安裝Github\">#</a>\n去 [Github Desktop](https://desktop.github.com/) 官網下載直接安裝即可。\n\n#### Github Desktop 使用 <a href=\"#Github使用\" id=\"Github使用\">#</a>\n去 [Github](https://github.com/) 官網登入\n新增一個倉庫(Repositories)，倉庫名稱為 ``yourname.github.io`` [yourname是你的帳號]。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E6%96%B0%E5%A2%9E%E5%80%89%E5%BA%AB.png\" alt=\"創建倉庫\" width=\"50%\" height=\"50%\" />\n開啟剛安裝好的 Github Desktop ，並將剛創好的倉庫存到本地端。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E9%96%8B%E5%95%9Fgui.png\" alt=\"存下倉庫\" width=\"50%\" height=\"50%\" />\n然後右鍵剛拉下來的倉庫，選取 Open in Git Shell 打開 Git bash(option可選)，執行指令將 Github 上的倉庫拉到本地端。\n```\n$ git pull origin master\n```\nGithub Desktop 右上的 Sync 按鈕具有 pull/push 功能，不想打指令可以多嘗試。\n使用 Github Desktop 的好處是不必像其他教學一樣，不需要配置 SSH Key 和 設定 origin 位置路徑，省了兩個步驟。\n\n#### 安裝 Hexo  <a href=\"#安裝Hexo\" id=\"安裝Hexo\">#</a>\n安裝好 Node.js 後，就能使用 npm 安裝 hexo。\n```\n$ npm install -g hexo-cli\n```\n輸入以下指令可查看版本。\n```\n$ hexo version\n```\n接下來，依序輸入以下指令，初始化我們的 Blog。\n```\n# git bash 上面的路徑大概長這樣\nYou-PC@You  /e/Documents/GitHub/yourname.github.io (master)\n$ hexo init\t\t# 初始化 blog\n# 輸入上面那個指令後 hexo 會產生新的 .git蓋掉舊的 .git\n$ git init              # 所以就重新產生一個 .git\n$ npm install\t\t# 安裝相關套件\n$ hexo g\t\t# 產生靜態頁面\n$ hexo s\t\t# 啟動本地伺服器\n```\n網址列輸入 ``http://localhost:4000`` ，就能觀看 Blog 了。\n預設會有一個 Hello World 貼文。\n\n#### 部署 Hexo 到 Github  <a href=\"#部署Hexo\" id=\"部署Hexo\">#</a>\n到我們本地 yourname.github.io 的資料夾中能找到 _config.yml 文件。\n這是 Hexo 的全域配置文件。詳細參數設定可到 [Hexo搭建个人博客（二）](http://yurixu.com/blog/2016/01/04/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/) 查看\n這邊拉到最底部修改一下 deploy 參數。\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n這邊是 YAML 語法，冒號後面記得空一格，照上面的設定輸入，倉庫的 SSH 地址如下圖可獲得。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/SSH.png\" alt=\"SSH地址鏈接\" width=\"50%\" height=\"50%\" />\n執行以下命令安裝 hexo-deployer-git，沒安裝套件前輸入 hexo d 會出現 Error。\n```\n$ npm install hexo-deployer-git --save\n```\n產生靜態頁面後，部署到 Github。\n```\n$ hexo d -g     # 等同輸入 hexo g 和 hexo d 指令\n```\n再來就可以上 ``https://yourname.github.io/`` 查看 Blog 了。\n\n\n## 自訂義部分 <a href=\"#自訂義部分\" id=\"自訂義部分\">#</a>\n這邊是我有用到客製化的一些紀錄\n如果動過這區的東西，要砍掉舊的靜態檔案，才會換成修改過的靜態檔案。\n```\n$ hexo clean\n```\n清除快取檔案 ``(db.json)`` 和已產生的靜態檔案 ``(public)``。\n#### 程式碼區塊 <a href=\"#程式碼區塊\" id=\"程式碼區塊\">#</a>\n\n找到文件 ``/themes/landscape/source/css/_partial/highlight.styl`` 中17行\n```\nmargin: 0 article-padding * -1\n```\n換成\n```\nmargin: auto\n```\n這樣程式碼區塊就會與兩側保持一定間距。\n在第22行添加\n```\nborder-radius：8px\n```\n使程式碼區塊呈現圓角效果。\n\n#### 字體 <a href=\"#字體\" id=\"字體\">#</a>\n找到文件 ``/themes/landscape/source/css/_variables.styl`` 修改\n```\nfont-sans = Microsoft JhengHei, \"Helvetica Neue\", Helvetica, Arial, sans-serif\nfont-size = 16px\n```\n#### Newer Older 相反 <a href=\"#相反\" id=\"相反\">#</a>\n突然發現下方 Newer Older 居然連結相反了。\n到 ``/themes/landscape/layout/_partial/post/nav.ejs`` 修改。\n把 prev 跟 next 對調一下。\n```\n<% if (post.next || post.prev){ %>\n<nav id=\"article-nav\">\n  <% if (post.next){ %>\n    <a href=\"<%- url_for(post.next.path) %>\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\"><%= __('newer') %></strong>\n      <div class=\"article-nav-title\">\n        <% if (post.next.title){ %>\n          <%= post.next.title %>\n        <% } else { %>\n          (no title)\n        <% } %>\n      </div>\n    </a>\n  <% } %>\n  <% if (post.prev){ %>\n    <a href=\"<%- url_for(post.prev.path) %>\" id=\"article-nav-older\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\"><%= __('older') %></strong>\n      <div class=\"article-nav-title\"><%= post.prev.title %></div>\n    </a>\n  <% } %>\n</nav>\n<% } %>\n```\n## 常用 Hexo 指令 <a href=\"#常用指令\" id=\"常用指令\">#</a>\n發文\n```\n$ hexo new \"postName\" \t\t# 產生新的文章\n$ hexo new page \"pageName\"\t# 產生新的頁面\n```\nHexo提供了常用命令的簡寫\n```\n$ hexo n == hexo new   \t\t# 產生新的 post/page/draft\n$ hexo g == hexo generate  \t# 產生靜態頁面\n$ hexo s == hexo server\t\t# 啟動本地瀏覽\n$ hexo d == hexo deploy\t\t# 部署文件至 Github 上\n```\n指令組合\n```\n$ hexo d -g\t# 產生靜態文件後，部署 blog\n$ hexo s -g\t# 產生靜態文件後，預覽 blog\n```\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[Hexo + Github 零基礎建立過程](https://mousyball.github.io/2017/01/01/Hexo-Github-Build/#an-zhuang-github-desktop)\n[Hexo搭建个人博客](http://yurixu.com/categories/Hexo/)\n[添加回滚到顶部按钮](http://charsdavy.github.io/2016/06/24/hexo-extern-scroll-top/)","source":"_posts/Hexo-Github-簡單使用教學.md","raw":"---\ntitle: Hexo + Github 簡單使用教學\ndate: 2017-04-21 21:03:41\ncategories: Hexo\ntags: Hexo\n---\n\n這邊主要就紀錄我使用 Hexo 部署到 Github 上的流程。\n<!--more-->\n* [前言](#前言)\n* [建置環境](#建置環境)\n* [建立流程](#建立流程)\n  * [安裝 Node.js](#安裝Node)\n  * [安裝 Github Desktop](#安裝Github)\n  * [Github Desktop 使用](#Github使用)\n  * [安裝 Hexo](#安裝Hexo)\n  * [部署 Hexo 到 Github](#部署Hexo)\n* [自訂義部分](#自訂義部分)\n  * [程式碼區塊](#程式碼區塊)\n  * [字體](#字體)\n  * [Newer Older 相反](#相反)\n* [常用 Hexo 指令](#常用指令)\n* [Reference](#Reference)\n\n## 前言 <a href=\"#前言\" id=\"前言\">#</a>\n因為第一次使用 Github，Node.js 和 Hexo，所以只有會一點基礎東西。\n主要是幫助從沒接觸過的人能快速上手。\n\n## 建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a>\nOS: Windows 8.1\n[Hexo](https://hexo.io/zh-tw/): 3.3.1\n[Node.js](https://nodejs.org/en/): 6.10.2 LTS\n[Github Desktop](https://desktop.github.com/)\n\n## 建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a>\n#### 安裝 Node.js <a href=\"#安裝Node\" id=\"安裝Node\">#</a>\n去 [Node.js](https://nodejs.org/en/) 官網下載 windows x64 版本直接安裝即可。\n```\n$ node -v   # 可測試是否安裝成功\n>> v6.10.2\n```\n#### 安裝 Github Desktop <a href=\"#安裝Github\" id=\"安裝Github\">#</a>\n去 [Github Desktop](https://desktop.github.com/) 官網下載直接安裝即可。\n\n#### Github Desktop 使用 <a href=\"#Github使用\" id=\"Github使用\">#</a>\n去 [Github](https://github.com/) 官網登入\n新增一個倉庫(Repositories)，倉庫名稱為 ``yourname.github.io`` [yourname是你的帳號]。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E6%96%B0%E5%A2%9E%E5%80%89%E5%BA%AB.png\" alt=\"創建倉庫\" width=\"50%\" height=\"50%\" />\n開啟剛安裝好的 Github Desktop ，並將剛創好的倉庫存到本地端。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E9%96%8B%E5%95%9Fgui.png\" alt=\"存下倉庫\" width=\"50%\" height=\"50%\" />\n然後右鍵剛拉下來的倉庫，選取 Open in Git Shell 打開 Git bash(option可選)，執行指令將 Github 上的倉庫拉到本地端。\n```\n$ git pull origin master\n```\nGithub Desktop 右上的 Sync 按鈕具有 pull/push 功能，不想打指令可以多嘗試。\n使用 Github Desktop 的好處是不必像其他教學一樣，不需要配置 SSH Key 和 設定 origin 位置路徑，省了兩個步驟。\n\n#### 安裝 Hexo  <a href=\"#安裝Hexo\" id=\"安裝Hexo\">#</a>\n安裝好 Node.js 後，就能使用 npm 安裝 hexo。\n```\n$ npm install -g hexo-cli\n```\n輸入以下指令可查看版本。\n```\n$ hexo version\n```\n接下來，依序輸入以下指令，初始化我們的 Blog。\n```\n# git bash 上面的路徑大概長這樣\nYou-PC@You  /e/Documents/GitHub/yourname.github.io (master)\n$ hexo init\t\t# 初始化 blog\n# 輸入上面那個指令後 hexo 會產生新的 .git蓋掉舊的 .git\n$ git init              # 所以就重新產生一個 .git\n$ npm install\t\t# 安裝相關套件\n$ hexo g\t\t# 產生靜態頁面\n$ hexo s\t\t# 啟動本地伺服器\n```\n網址列輸入 ``http://localhost:4000`` ，就能觀看 Blog 了。\n預設會有一個 Hello World 貼文。\n\n#### 部署 Hexo 到 Github  <a href=\"#部署Hexo\" id=\"部署Hexo\">#</a>\n到我們本地 yourname.github.io 的資料夾中能找到 _config.yml 文件。\n這是 Hexo 的全域配置文件。詳細參數設定可到 [Hexo搭建个人博客（二）](http://yurixu.com/blog/2016/01/04/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/) 查看\n這邊拉到最底部修改一下 deploy 參數。\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n這邊是 YAML 語法，冒號後面記得空一格，照上面的設定輸入，倉庫的 SSH 地址如下圖可獲得。\n\n<img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/SSH.png\" alt=\"SSH地址鏈接\" width=\"50%\" height=\"50%\" />\n執行以下命令安裝 hexo-deployer-git，沒安裝套件前輸入 hexo d 會出現 Error。\n```\n$ npm install hexo-deployer-git --save\n```\n產生靜態頁面後，部署到 Github。\n```\n$ hexo d -g     # 等同輸入 hexo g 和 hexo d 指令\n```\n再來就可以上 ``https://yourname.github.io/`` 查看 Blog 了。\n\n\n## 自訂義部分 <a href=\"#自訂義部分\" id=\"自訂義部分\">#</a>\n這邊是我有用到客製化的一些紀錄\n如果動過這區的東西，要砍掉舊的靜態檔案，才會換成修改過的靜態檔案。\n```\n$ hexo clean\n```\n清除快取檔案 ``(db.json)`` 和已產生的靜態檔案 ``(public)``。\n#### 程式碼區塊 <a href=\"#程式碼區塊\" id=\"程式碼區塊\">#</a>\n\n找到文件 ``/themes/landscape/source/css/_partial/highlight.styl`` 中17行\n```\nmargin: 0 article-padding * -1\n```\n換成\n```\nmargin: auto\n```\n這樣程式碼區塊就會與兩側保持一定間距。\n在第22行添加\n```\nborder-radius：8px\n```\n使程式碼區塊呈現圓角效果。\n\n#### 字體 <a href=\"#字體\" id=\"字體\">#</a>\n找到文件 ``/themes/landscape/source/css/_variables.styl`` 修改\n```\nfont-sans = Microsoft JhengHei, \"Helvetica Neue\", Helvetica, Arial, sans-serif\nfont-size = 16px\n```\n#### Newer Older 相反 <a href=\"#相反\" id=\"相反\">#</a>\n突然發現下方 Newer Older 居然連結相反了。\n到 ``/themes/landscape/layout/_partial/post/nav.ejs`` 修改。\n把 prev 跟 next 對調一下。\n```\n<% if (post.next || post.prev){ %>\n<nav id=\"article-nav\">\n  <% if (post.next){ %>\n    <a href=\"<%- url_for(post.next.path) %>\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\"><%= __('newer') %></strong>\n      <div class=\"article-nav-title\">\n        <% if (post.next.title){ %>\n          <%= post.next.title %>\n        <% } else { %>\n          (no title)\n        <% } %>\n      </div>\n    </a>\n  <% } %>\n  <% if (post.prev){ %>\n    <a href=\"<%- url_for(post.prev.path) %>\" id=\"article-nav-older\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\"><%= __('older') %></strong>\n      <div class=\"article-nav-title\"><%= post.prev.title %></div>\n    </a>\n  <% } %>\n</nav>\n<% } %>\n```\n## 常用 Hexo 指令 <a href=\"#常用指令\" id=\"常用指令\">#</a>\n發文\n```\n$ hexo new \"postName\" \t\t# 產生新的文章\n$ hexo new page \"pageName\"\t# 產生新的頁面\n```\nHexo提供了常用命令的簡寫\n```\n$ hexo n == hexo new   \t\t# 產生新的 post/page/draft\n$ hexo g == hexo generate  \t# 產生靜態頁面\n$ hexo s == hexo server\t\t# 啟動本地瀏覽\n$ hexo d == hexo deploy\t\t# 部署文件至 Github 上\n```\n指令組合\n```\n$ hexo d -g\t# 產生靜態文件後，部署 blog\n$ hexo s -g\t# 產生靜態文件後，預覽 blog\n```\n## Reference  <a href=\"#Reference\" id=\"Reference\">#</a>\n[Hexo + Github 零基礎建立過程](https://mousyball.github.io/2017/01/01/Hexo-Github-Build/#an-zhuang-github-desktop)\n[Hexo搭建个人博客](http://yurixu.com/categories/Hexo/)\n[添加回滚到顶部按钮](http://charsdavy.github.io/2016/06/24/hexo-extern-scroll-top/)","slug":"Hexo-Github-簡單使用教學","published":1,"updated":"2017-04-23T17:48:21.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1vvcgwb000l30rqkuln8wxf","content":"<p>這邊主要就紀錄我使用 Hexo 部署到 Github 上的流程。<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#建立流程\">建立流程</a><ul>\n<li><a href=\"#安裝Node\">安裝 Node.js</a></li>\n<li><a href=\"#安裝Github\">安裝 Github Desktop</a></li>\n<li><a href=\"#Github使用\">Github Desktop 使用</a></li>\n<li><a href=\"#安裝Hexo\">安裝 Hexo</a></li>\n<li><a href=\"#部署Hexo\">部署 Hexo 到 Github</a></li>\n</ul>\n</li>\n<li><a href=\"#自訂義部分\">自訂義部分</a><ul>\n<li><a href=\"#程式碼區塊\">程式碼區塊</a></li>\n<li><a href=\"#字體\">字體</a></li>\n<li><a href=\"#相反\">Newer Older 相反</a></li>\n</ul>\n</li>\n<li><a href=\"#常用指令\">常用 Hexo 指令</a></li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>因為第一次使用 Github，Node.js 和 Hexo，所以只有會一點基礎東西。<br>主要是幫助從沒接觸過的人能快速上手。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br><a href=\"https://hexo.io/zh-tw/\" target=\"_blank\" rel=\"external\">Hexo</a>: 3.3.1<br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>: 6.10.2 LTS<br><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">Github Desktop</a></p>\n<h2 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程 #\"></a>建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a></h2><h4 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js #\"></a>安裝 Node.js <a href=\"#安裝Node\" id=\"安裝Node\">#</a></h4><p>去 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a> 官網下載 windows x64 版本直接安裝即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v   # 可測試是否安裝成功</div><div class=\"line\">&gt;&gt; v6.10.2</div></pre></td></tr></table></figure></p>\n<h4 id=\"安裝-Github-Desktop\"><a href=\"#安裝-Github-Desktop\" class=\"headerlink\" title=\"安裝 Github Desktop #\"></a>安裝 Github Desktop <a href=\"#安裝Github\" id=\"安裝Github\">#</a></h4><p>去 <a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">Github Desktop</a> 官網下載直接安裝即可。</p>\n<h4 id=\"Github-Desktop-使用\"><a href=\"#Github-Desktop-使用\" class=\"headerlink\" title=\"Github Desktop 使用 #\"></a>Github Desktop 使用 <a href=\"#Github使用\" id=\"Github使用\">#</a></h4><p>去 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a> 官網登入<br>新增一個倉庫(Repositories)，倉庫名稱為 <code>yourname.github.io</code> [yourname是你的帳號]。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E6%96%B0%E5%A2%9E%E5%80%89%E5%BA%AB.png\" alt=\"創建倉庫\" width=\"50%\" height=\"50%\"><br>開啟剛安裝好的 Github Desktop ，並將剛創好的倉庫存到本地端。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E9%96%8B%E5%95%9Fgui.png\" alt=\"存下倉庫\" width=\"50%\" height=\"50%\"><br>然後右鍵剛拉下來的倉庫，選取 Open in Git Shell 打開 Git bash(option可選)，執行指令將 Github 上的倉庫拉到本地端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div></pre></td></tr></table></figure></p>\n<p>Github Desktop 右上的 Sync 按鈕具有 pull/push 功能，不想打指令可以多嘗試。<br>使用 Github Desktop 的好處是不必像其他教學一樣，不需要配置 SSH Key 和 設定 origin 位置路徑，省了兩個步驟。</p>\n<h4 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo  #\"></a>安裝 Hexo  <a href=\"#安裝Hexo\" id=\"安裝Hexo\">#</a></h4><p>安裝好 Node.js 後，就能使用 npm 安裝 hexo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>輸入以下指令可查看版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure></p>\n<p>接下來，依序輸入以下指令，初始化我們的 Blog。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/yourname.github.io (master)</div><div class=\"line\">$ hexo init\t\t# 初始化 blog</div><div class=\"line\"># 輸入上面那個指令後 hexo 會產生新的 .git蓋掉舊的 .git</div><div class=\"line\">$ git init              # 所以就重新產生一個 .git</div><div class=\"line\">$ npm install\t\t# 安裝相關套件</div><div class=\"line\">$ hexo g\t\t# 產生靜態頁面</div><div class=\"line\">$ hexo s\t\t# 啟動本地伺服器</div></pre></td></tr></table></figure></p>\n<p>網址列輸入 <code>http://localhost:4000</code> ，就能觀看 Blog 了。<br>預設會有一個 Hello World 貼文。</p>\n<h4 id=\"部署-Hexo-到-Github\"><a href=\"#部署-Hexo-到-Github\" class=\"headerlink\" title=\"部署 Hexo 到 Github  #\"></a>部署 Hexo 到 Github  <a href=\"#部署Hexo\" id=\"部署Hexo\">#</a></h4><p>到我們本地 yourname.github.io 的資料夾中能找到 _config.yml 文件。<br>這是 Hexo 的全域配置文件。詳細參數設定可到 <a href=\"http://yurixu.com/blog/2016/01/04/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">Hexo搭建个人博客（二）</a> 查看<br>這邊拉到最底部修改一下 deploy 參數。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>這邊是 YAML 語法，冒號後面記得空一格，照上面的設定輸入，倉庫的 SSH 地址如下圖可獲得。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/SSH.png\" alt=\"SSH地址鏈接\" width=\"50%\" height=\"50%\"><br>執行以下命令安裝 hexo-deployer-git，沒安裝套件前輸入 hexo d 會出現 Error。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>產生靜態頁面後，部署到 Github。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g     # 等同輸入 hexo g 和 hexo d 指令</div></pre></td></tr></table></figure></p>\n<p>再來就可以上 <code>https://yourname.github.io/</code> 查看 Blog 了。</p>\n<h2 id=\"自訂義部分\"><a href=\"#自訂義部分\" class=\"headerlink\" title=\"自訂義部分 #\"></a>自訂義部分 <a href=\"#自訂義部分\" id=\"自訂義部分\">#</a></h2><p>這邊是我有用到客製化的一些紀錄<br>如果動過這區的東西，要砍掉舊的靜態檔案，才會換成修改過的靜態檔案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>清除快取檔案 <code>(db.json)</code> 和已產生的靜態檔案 <code>(public)</code>。</p>\n<h4 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊 #\"></a>程式碼區塊 <a href=\"#程式碼區塊\" id=\"程式碼區塊\">#</a></h4><p>找到文件 <code>/themes/landscape/source/css/_partial/highlight.styl</code> 中17行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: 0 article-padding * -1</div></pre></td></tr></table></figure></p>\n<p>換成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: auto</div></pre></td></tr></table></figure></p>\n<p>這樣程式碼區塊就會與兩側保持一定間距。<br>在第22行添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius：8px</div></pre></td></tr></table></figure></p>\n<p>使程式碼區塊呈現圓角效果。</p>\n<h4 id=\"字體\"><a href=\"#字體\" class=\"headerlink\" title=\"字體 #\"></a>字體 <a href=\"#字體\" id=\"字體\">#</a></h4><p>找到文件 <code>/themes/landscape/source/css/_variables.styl</code> 修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = Microsoft JhengHei, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif</div><div class=\"line\">font-size = 16px</div></pre></td></tr></table></figure></p>\n<h4 id=\"Newer-Older-相反\"><a href=\"#Newer-Older-相反\" class=\"headerlink\" title=\"Newer Older 相反 #\"></a>Newer Older 相反 <a href=\"#相反\" id=\"相反\">#</a></h4><p>突然發現下方 Newer Older 居然連結相反了。<br>到 <code>/themes/landscape/layout/_partial/post/nav.ejs</code> 修改。<br>把 prev 跟 next 對調一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (post.next || post.prev)&#123; %&gt;</div><div class=\"line\">&lt;nav id=&quot;article-nav&quot;&gt;</div><div class=\"line\">  &lt;% if (post.next)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- url_for(post.next.path) %&gt;&quot; id=&quot;article-nav-newer&quot; class=&quot;article-nav-link-wrap&quot;&gt;</div><div class=\"line\">      &lt;strong class=&quot;article-nav-caption&quot;&gt;&lt;%= __(&apos;newer&apos;) %&gt;&lt;/strong&gt;</div><div class=\"line\">      &lt;div class=&quot;article-nav-title&quot;&gt;</div><div class=\"line\">        &lt;% if (post.next.title)&#123; %&gt;</div><div class=\"line\">          &lt;%= post.next.title %&gt;</div><div class=\"line\">        &lt;% &#125; else &#123; %&gt;</div><div class=\"line\">          (no title)</div><div class=\"line\">        &lt;% &#125; %&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">  &lt;% if (post.prev)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- url_for(post.prev.path) %&gt;&quot; id=&quot;article-nav-older&quot; class=&quot;article-nav-link-wrap&quot;&gt;</div><div class=\"line\">      &lt;strong class=&quot;article-nav-caption&quot;&gt;&lt;%= __(&apos;older&apos;) %&gt;&lt;/strong&gt;</div><div class=\"line\">      &lt;div class=&quot;article-nav-title&quot;&gt;&lt;%= post.prev.title %&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用-Hexo-指令\"><a href=\"#常用-Hexo-指令\" class=\"headerlink\" title=\"常用 Hexo 指令 #\"></a>常用 Hexo 指令 <a href=\"#常用指令\" id=\"常用指令\">#</a></h2><p>發文<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;postName&quot; \t\t# 產生新的文章</div><div class=\"line\">$ hexo new page &quot;pageName&quot;\t# 產生新的頁面</div></pre></td></tr></table></figure></p>\n<p>Hexo提供了常用命令的簡寫<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n == hexo new   \t\t# 產生新的 post/page/draft</div><div class=\"line\">$ hexo g == hexo generate  \t# 產生靜態頁面</div><div class=\"line\">$ hexo s == hexo server\t\t# 啟動本地瀏覽</div><div class=\"line\">$ hexo d == hexo deploy\t\t# 部署文件至 Github 上</div></pre></td></tr></table></figure></p>\n<p>指令組合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g\t# 產生靜態文件後，部署 blog</div><div class=\"line\">$ hexo s -g\t# 產生靜態文件後，預覽 blog</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"https://mousyball.github.io/2017/01/01/Hexo-Github-Build/#an-zhuang-github-desktop\" target=\"_blank\" rel=\"external\">Hexo + Github 零基礎建立過程</a><br><a href=\"http://yurixu.com/categories/Hexo/\" target=\"_blank\" rel=\"external\">Hexo搭建个人博客</a><br><a href=\"http://charsdavy.github.io/2016/06/24/hexo-extern-scroll-top/\" target=\"_blank\" rel=\"external\">添加回滚到顶部按钮</a></p>\n","site":{"data":{}},"excerpt":"<p>這邊主要就紀錄我使用 Hexo 部署到 Github 上的流程。<br>","more":"</p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#建置環境\">建置環境</a></li>\n<li><a href=\"#建立流程\">建立流程</a><ul>\n<li><a href=\"#安裝Node\">安裝 Node.js</a></li>\n<li><a href=\"#安裝Github\">安裝 Github Desktop</a></li>\n<li><a href=\"#Github使用\">Github Desktop 使用</a></li>\n<li><a href=\"#安裝Hexo\">安裝 Hexo</a></li>\n<li><a href=\"#部署Hexo\">部署 Hexo 到 Github</a></li>\n</ul>\n</li>\n<li><a href=\"#自訂義部分\">自訂義部分</a><ul>\n<li><a href=\"#程式碼區塊\">程式碼區塊</a></li>\n<li><a href=\"#字體\">字體</a></li>\n<li><a href=\"#相反\">Newer Older 相反</a></li>\n</ul>\n</li>\n<li><a href=\"#常用指令\">常用 Hexo 指令</a></li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言 #\"></a>前言 <a href=\"#前言\" id=\"前言\">#</a></h2><p>因為第一次使用 Github，Node.js 和 Hexo，所以只有會一點基礎東西。<br>主要是幫助從沒接觸過的人能快速上手。</p>\n<h2 id=\"建置環境\"><a href=\"#建置環境\" class=\"headerlink\" title=\"建置環境 #\"></a>建置環境 <a href=\"#建置環境\" id=\"建置環境\">#</a></h2><p>OS: Windows 8.1<br><a href=\"https://hexo.io/zh-tw/\">Hexo</a>: 3.3.1<br><a href=\"https://nodejs.org/en/\">Node.js</a>: 6.10.2 LTS<br><a href=\"https://desktop.github.com/\">Github Desktop</a></p>\n<h2 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程 #\"></a>建立流程 <a href=\"#建立流程\" id=\"建立流程\">#</a></h2><h4 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js #\"></a>安裝 Node.js <a href=\"#安裝Node\" id=\"安裝Node\">#</a></h4><p>去 <a href=\"https://nodejs.org/en/\">Node.js</a> 官網下載 windows x64 版本直接安裝即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v   # 可測試是否安裝成功</div><div class=\"line\">&gt;&gt; v6.10.2</div></pre></td></tr></table></figure></p>\n<h4 id=\"安裝-Github-Desktop\"><a href=\"#安裝-Github-Desktop\" class=\"headerlink\" title=\"安裝 Github Desktop #\"></a>安裝 Github Desktop <a href=\"#安裝Github\" id=\"安裝Github\">#</a></h4><p>去 <a href=\"https://desktop.github.com/\">Github Desktop</a> 官網下載直接安裝即可。</p>\n<h4 id=\"Github-Desktop-使用\"><a href=\"#Github-Desktop-使用\" class=\"headerlink\" title=\"Github Desktop 使用 #\"></a>Github Desktop 使用 <a href=\"#Github使用\" id=\"Github使用\">#</a></h4><p>去 <a href=\"https://github.com/\">Github</a> 官網登入<br>新增一個倉庫(Repositories)，倉庫名稱為 <code>yourname.github.io</code> [yourname是你的帳號]。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E6%96%B0%E5%A2%9E%E5%80%89%E5%BA%AB.png\" alt=\"創建倉庫\" width=\"50%\" height=\"50%\" /><br>開啟剛安裝好的 Github Desktop ，並將剛創好的倉庫存到本地端。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/%E9%96%8B%E5%95%9Fgui.png\" alt=\"存下倉庫\" width=\"50%\" height=\"50%\" /><br>然後右鍵剛拉下來的倉庫，選取 Open in Git Shell 打開 Git bash(option可選)，執行指令將 Github 上的倉庫拉到本地端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div></pre></td></tr></table></figure></p>\n<p>Github Desktop 右上的 Sync 按鈕具有 pull/push 功能，不想打指令可以多嘗試。<br>使用 Github Desktop 的好處是不必像其他教學一樣，不需要配置 SSH Key 和 設定 origin 位置路徑，省了兩個步驟。</p>\n<h4 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo  #\"></a>安裝 Hexo  <a href=\"#安裝Hexo\" id=\"安裝Hexo\">#</a></h4><p>安裝好 Node.js 後，就能使用 npm 安裝 hexo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>輸入以下指令可查看版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure></p>\n<p>接下來，依序輸入以下指令，初始化我們的 Blog。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git bash 上面的路徑大概長這樣</div><div class=\"line\">You-PC@You  /e/Documents/GitHub/yourname.github.io (master)</div><div class=\"line\">$ hexo init\t\t# 初始化 blog</div><div class=\"line\"># 輸入上面那個指令後 hexo 會產生新的 .git蓋掉舊的 .git</div><div class=\"line\">$ git init              # 所以就重新產生一個 .git</div><div class=\"line\">$ npm install\t\t# 安裝相關套件</div><div class=\"line\">$ hexo g\t\t# 產生靜態頁面</div><div class=\"line\">$ hexo s\t\t# 啟動本地伺服器</div></pre></td></tr></table></figure></p>\n<p>網址列輸入 <code>http://localhost:4000</code> ，就能觀看 Blog 了。<br>預設會有一個 Hello World 貼文。</p>\n<h4 id=\"部署-Hexo-到-Github\"><a href=\"#部署-Hexo-到-Github\" class=\"headerlink\" title=\"部署 Hexo 到 Github  #\"></a>部署 Hexo 到 Github  <a href=\"#部署Hexo\" id=\"部署Hexo\">#</a></h4><p>到我們本地 yourname.github.io 的資料夾中能找到 _config.yml 文件。<br>這是 Hexo 的全域配置文件。詳細參數設定可到 <a href=\"http://yurixu.com/blog/2016/01/04/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/\">Hexo搭建个人博客（二）</a> 查看<br>這邊拉到最底部修改一下 deploy 參數。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>這邊是 YAML 語法，冒號後面記得空一格，照上面的設定輸入，倉庫的 SSH 地址如下圖可獲得。</p>\n<p><img src=\"https://raw.githubusercontent.com/zxc7415239/MarkdownPhotos/master/photos/SSH.png\" alt=\"SSH地址鏈接\" width=\"50%\" height=\"50%\" /><br>執行以下命令安裝 hexo-deployer-git，沒安裝套件前輸入 hexo d 會出現 Error。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>產生靜態頁面後，部署到 Github。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g     # 等同輸入 hexo g 和 hexo d 指令</div></pre></td></tr></table></figure></p>\n<p>再來就可以上 <code>https://yourname.github.io/</code> 查看 Blog 了。</p>\n<h2 id=\"自訂義部分\"><a href=\"#自訂義部分\" class=\"headerlink\" title=\"自訂義部分 #\"></a>自訂義部分 <a href=\"#自訂義部分\" id=\"自訂義部分\">#</a></h2><p>這邊是我有用到客製化的一些紀錄<br>如果動過這區的東西，要砍掉舊的靜態檔案，才會換成修改過的靜態檔案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>清除快取檔案 <code>(db.json)</code> 和已產生的靜態檔案 <code>(public)</code>。</p>\n<h4 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊 #\"></a>程式碼區塊 <a href=\"#程式碼區塊\" id=\"程式碼區塊\">#</a></h4><p>找到文件 <code>/themes/landscape/source/css/_partial/highlight.styl</code> 中17行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: 0 article-padding * -1</div></pre></td></tr></table></figure></p>\n<p>換成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: auto</div></pre></td></tr></table></figure></p>\n<p>這樣程式碼區塊就會與兩側保持一定間距。<br>在第22行添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius：8px</div></pre></td></tr></table></figure></p>\n<p>使程式碼區塊呈現圓角效果。</p>\n<h4 id=\"字體\"><a href=\"#字體\" class=\"headerlink\" title=\"字體 #\"></a>字體 <a href=\"#字體\" id=\"字體\">#</a></h4><p>找到文件 <code>/themes/landscape/source/css/_variables.styl</code> 修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = Microsoft JhengHei, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif</div><div class=\"line\">font-size = 16px</div></pre></td></tr></table></figure></p>\n<h4 id=\"Newer-Older-相反\"><a href=\"#Newer-Older-相反\" class=\"headerlink\" title=\"Newer Older 相反 #\"></a>Newer Older 相反 <a href=\"#相反\" id=\"相反\">#</a></h4><p>突然發現下方 Newer Older 居然連結相反了。<br>到 <code>/themes/landscape/layout/_partial/post/nav.ejs</code> 修改。<br>把 prev 跟 next 對調一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (post.next || post.prev)&#123; %&gt;</div><div class=\"line\">&lt;nav id=&quot;article-nav&quot;&gt;</div><div class=\"line\">  &lt;% if (post.next)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- url_for(post.next.path) %&gt;&quot; id=&quot;article-nav-newer&quot; class=&quot;article-nav-link-wrap&quot;&gt;</div><div class=\"line\">      &lt;strong class=&quot;article-nav-caption&quot;&gt;&lt;%= __(&apos;newer&apos;) %&gt;&lt;/strong&gt;</div><div class=\"line\">      &lt;div class=&quot;article-nav-title&quot;&gt;</div><div class=\"line\">        &lt;% if (post.next.title)&#123; %&gt;</div><div class=\"line\">          &lt;%= post.next.title %&gt;</div><div class=\"line\">        &lt;% &#125; else &#123; %&gt;</div><div class=\"line\">          (no title)</div><div class=\"line\">        &lt;% &#125; %&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">  &lt;% if (post.prev)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- url_for(post.prev.path) %&gt;&quot; id=&quot;article-nav-older&quot; class=&quot;article-nav-link-wrap&quot;&gt;</div><div class=\"line\">      &lt;strong class=&quot;article-nav-caption&quot;&gt;&lt;%= __(&apos;older&apos;) %&gt;&lt;/strong&gt;</div><div class=\"line\">      &lt;div class=&quot;article-nav-title&quot;&gt;&lt;%= post.prev.title %&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用-Hexo-指令\"><a href=\"#常用-Hexo-指令\" class=\"headerlink\" title=\"常用 Hexo 指令 #\"></a>常用 Hexo 指令 <a href=\"#常用指令\" id=\"常用指令\">#</a></h2><p>發文<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;postName&quot; \t\t# 產生新的文章</div><div class=\"line\">$ hexo new page &quot;pageName&quot;\t# 產生新的頁面</div></pre></td></tr></table></figure></p>\n<p>Hexo提供了常用命令的簡寫<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n == hexo new   \t\t# 產生新的 post/page/draft</div><div class=\"line\">$ hexo g == hexo generate  \t# 產生靜態頁面</div><div class=\"line\">$ hexo s == hexo server\t\t# 啟動本地瀏覽</div><div class=\"line\">$ hexo d == hexo deploy\t\t# 部署文件至 Github 上</div></pre></td></tr></table></figure></p>\n<p>指令組合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g\t# 產生靜態文件後，部署 blog</div><div class=\"line\">$ hexo s -g\t# 產生靜態文件後，預覽 blog</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference  #\"></a>Reference  <a href=\"#Reference\" id=\"Reference\">#</a></h2><p><a href=\"https://mousyball.github.io/2017/01/01/Hexo-Github-Build/#an-zhuang-github-desktop\">Hexo + Github 零基礎建立過程</a><br><a href=\"http://yurixu.com/categories/Hexo/\">Hexo搭建个人博客</a><br><a href=\"http://charsdavy.github.io/2016/06/24/hexo-extern-scroll-top/\">添加回滚到顶部按钮</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1vvcgvr000030rqe7a2dypg","category_id":"cj1vvcgvr000230rq3rnx23xl","_id":"cj1vvcgw1000830rq9xgbb8mq"},{"post_id":"cj1vvcgw1000430rqes3hesjn","category_id":"cj1vvcgw1000530rqjsm1fkeq","_id":"cj1vvcgw1000d30rqvbkhyvht"},{"post_id":"cj1vvcgvr000130rq47ef0ox5","category_id":"cj1vvcgw1000530rqjsm1fkeq","_id":"cj1vvcgw1000g30rqvvs0e0l7"},{"post_id":"cj1vvcgvr000130rq47ef0ox5","category_id":"cj1vvcgw1000b30rqniw2lh4n","_id":"cj1vvcgw1000i30rqtpmefilg"},{"post_id":"cj1vvcgwb000l30rqkuln8wxf","category_id":"cj1vvcgvr000230rq3rnx23xl","_id":"cj1vvcgwb000n30rq7gbfr9tv"}],"PostTag":[{"post_id":"cj1vvcgvr000030rqe7a2dypg","tag_id":"cj1vvcgw1000330rqw7zukmtk","_id":"cj1vvcgw1000730rqv8i3edv2"},{"post_id":"cj1vvcgvr000130rq47ef0ox5","tag_id":"cj1vvcgw1000630rqhzoz45ff","_id":"cj1vvcgw1000f30rqedhntogx"},{"post_id":"cj1vvcgvr000130rq47ef0ox5","tag_id":"cj1vvcgw1000a30rqiqz2o6nu","_id":"cj1vvcgw1000h30rqx1qm9eqo"},{"post_id":"cj1vvcgvr000130rq47ef0ox5","tag_id":"cj1vvcgw1000c30rqpg9jvrmc","_id":"cj1vvcgw1000j30rqorhx0v65"},{"post_id":"cj1vvcgw1000430rqes3hesjn","tag_id":"cj1vvcgw1000630rqhzoz45ff","_id":"cj1vvcgw1000k30rqy1238zbx"},{"post_id":"cj1vvcgwb000l30rqkuln8wxf","tag_id":"cj1vvcgw1000330rqw7zukmtk","_id":"cj1vvcgwb000m30rq3lp0zyz0"}],"Tag":[{"name":"Hexo","_id":"cj1vvcgw1000330rqw7zukmtk"},{"name":"Python","_id":"cj1vvcgw1000630rqhzoz45ff"},{"name":"Django","_id":"cj1vvcgw1000a30rqiqz2o6nu"},{"name":"Celery","_id":"cj1vvcgw1000c30rqpg9jvrmc"}]}}